
PixelClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800807c  0800807c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800807c  0800807c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800807c  0800807c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008080  08008080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002778  20000010  08008094  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002788  08008094  00022788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1e7  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d61  00000000  00000000  0003f220  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b38  00000000  00000000  00042f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019a0  00000000  00000000  00044ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000476e  00000000  00000000  00046460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000147d9  00000000  00000000  0004abce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082d4b  00000000  00000000  0005f3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e20f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007358  00000000  00000000  000e2170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080076dc 	.word	0x080076dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080076dc 	.word	0x080076dc

08000150 <HAL_RTCEx_RTCEventCallback>:
void putcolon(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc){
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	if(flag_colon_display) {
 8000158:	4b07      	ldr	r3, [pc, #28]	; (8000178 <HAL_RTCEx_RTCEventCallback+0x28>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d003      	beq.n	8000168 <HAL_RTCEx_RTCEventCallback+0x18>
		flag_colon_display = 0;
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <HAL_RTCEx_RTCEventCallback+0x28>)
 8000162:	2200      	movs	r2, #0
 8000164:	701a      	strb	r2, [r3, #0]
	} else {
		flag_colon_display = 1;
	}
}
 8000166:	e002      	b.n	800016e <HAL_RTCEx_RTCEventCallback+0x1e>
		flag_colon_display = 1;
 8000168:	4b03      	ldr	r3, [pc, #12]	; (8000178 <HAL_RTCEx_RTCEventCallback+0x28>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20002662 	.word	0x20002662

0800017c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1){ // WiFi
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <HAL_UART_RxCpltCallback+0x20>)
 800018a:	4293      	cmp	r3, r2
 800018c:	d102      	bne.n	8000194 <HAL_UART_RxCpltCallback+0x18>
		handle_rx(huart);
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f000 f83e 	bl	8000210 <handle_rx>
		//osEventFlagsSet(uart1Event,0x01);
	}
}
 8000194:	bf00      	nop
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40013800 	.word	0x40013800

080001a0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart )
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_OREFLAG(huart);
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	617b      	str	r3, [r7, #20]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	617b      	str	r3, [r7, #20]
 80001bc:	697b      	ldr	r3, [r7, #20]
	__HAL_UART_CLEAR_NEFLAG(huart);
 80001be:	2300      	movs	r3, #0
 80001c0:	613b      	str	r3, [r7, #16]
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	613b      	str	r3, [r7, #16]
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	613b      	str	r3, [r7, #16]
 80001d2:	693b      	ldr	r3, [r7, #16]
	__HAL_UART_CLEAR_FEFLAG(huart);
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fb      	ldr	r3, [r7, #12]

	if(huart->Instance == USART1){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a06      	ldr	r2, [pc, #24]	; (8000208 <HAL_UART_ErrorCallback+0x68>)
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d104      	bne.n	80001fe <HAL_UART_ErrorCallback+0x5e>
		HAL_UART_Receive_DMA(huart,uart_rx_data, RX_DATA_SIZE);
 80001f4:	2280      	movs	r2, #128	; 0x80
 80001f6:	4905      	ldr	r1, [pc, #20]	; (800020c <HAL_UART_ErrorCallback+0x6c>)
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f004 f8d9 	bl	80043b0 <HAL_UART_Receive_DMA>
	}

}
 80001fe:	bf00      	nop
 8000200:	3718      	adds	r7, #24
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40013800 	.word	0x40013800
 800020c:	2000002c 	.word	0x2000002c

08000210 <handle_rx>:

void handle_rx(UART_HandleTypeDef *huart){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	static size_t old_pos;
	size_t pos;

	/* Calculate current position in buffer */
	pos = ARRAY_LEN(uart_rx_data) - huart->hdmarx->Instance->CNDTR;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000224:	60fb      	str	r3, [r7, #12]
	if (pos != old_pos) {
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <handle_rx+0x80>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	429a      	cmp	r2, r3
 800022e:	d020      	beq.n	8000272 <handle_rx+0x62>
		if (pos > old_pos) {                    /* Current position is over previous one */
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <handle_rx+0x80>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	429a      	cmp	r2, r3
 8000238:	d90b      	bls.n	8000252 <handle_rx+0x42>
			/* We are in "linear" mode */
			/* Process data directly by subtracting "pointers" */
			usart_process_data(&uart_rx_data[old_pos], pos - old_pos);
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <handle_rx+0x80>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <handle_rx+0x84>)
 8000240:	1898      	adds	r0, r3, r2
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <handle_rx+0x80>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	4619      	mov	r1, r3
 800024c:	f000 f824 	bl	8000298 <usart_process_data>
 8000250:	e00f      	b.n	8000272 <handle_rx+0x62>
		} else {
			/* We are in "overflow" mode */
			/* First process data to the end of buffer */
			usart_process_data(&uart_rx_data[old_pos], ARRAY_LEN(uart_rx_data) - old_pos);
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <handle_rx+0x80>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <handle_rx+0x84>)
 8000258:	441a      	add	r2, r3
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <handle_rx+0x80>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000262:	4619      	mov	r1, r3
 8000264:	4610      	mov	r0, r2
 8000266:	f000 f817 	bl	8000298 <usart_process_data>
			/* Continue from beginning of buffer */
			usart_process_data(&uart_rx_data[0], pos);
 800026a:	68f9      	ldr	r1, [r7, #12]
 800026c:	4809      	ldr	r0, [pc, #36]	; (8000294 <handle_rx+0x84>)
 800026e:	f000 f813 	bl	8000298 <usart_process_data>
		}
	}

	old_pos = pos;
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <handle_rx+0x80>)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	6013      	str	r3, [r2, #0]

	/* Check and manually update if we reached end of buffer */
	if(old_pos == ARRAY_LEN(uart_rx_data)){
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <handle_rx+0x80>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b80      	cmp	r3, #128	; 0x80
 800027e:	d102      	bne.n	8000286 <handle_rx+0x76>
		old_pos = 0;
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <handle_rx+0x80>)
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
	}

}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	200000ac 	.word	0x200000ac
 8000294:	2000002c 	.word	0x2000002c

08000298 <usart_process_data>:

void usart_process_data(const void* data, size_t len){
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
	const uint8_t* d = data;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
	//static size_t tx_pos;
	static uint8_t flag_frame;
	static uint16_t length;
	static uint8_t i;

	while (len--) {
 80002a6:	e010      	b.n	80002ca <usart_process_data+0x32>
		switch(flag_frame){
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <usart_process_data+0x48>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <usart_process_data+0x1c>
 80002b0:	2b01      	cmp	r3, #1
		case WAIT_FOR_FRAME_START:
			if(*d == '[') flag_frame = WAIT_FOR_DATA;
			break;
		case WAIT_FOR_DATA:
			break;
 80002b2:	e007      	b.n	80002c4 <usart_process_data+0x2c>
			if(*d == '[') flag_frame = WAIT_FOR_DATA;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b5b      	cmp	r3, #91	; 0x5b
 80002ba:	d102      	bne.n	80002c2 <usart_process_data+0x2a>
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <usart_process_data+0x48>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
			break;
 80002c2:	bf00      	nop
		}
		d++;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
	while (len--) {
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	1e5a      	subs	r2, r3, #1
 80002ce:	603a      	str	r2, [r7, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d1e9      	bne.n	80002a8 <usart_process_data+0x10>
	}
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	200000b0 	.word	0x200000b0

080002e4 <setPixel>:


// Set a LED color (not yet visible)
void setPixel(int Pixel, uint8_t red, uint8_t green, uint8_t blue) {
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	4608      	mov	r0, r1
 80002ee:	4611      	mov	r1, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	4603      	mov	r3, r0
 80002f4:	70fb      	strb	r3, [r7, #3]
 80002f6:	460b      	mov	r3, r1
 80002f8:	70bb      	strb	r3, [r7, #2]
 80002fa:	4613      	mov	r3, r2
 80002fc:	707b      	strb	r3, [r7, #1]
	uint32_t j,k;

	j = Pixel*9;
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4613      	mov	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	4413      	add	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]

	k = green*3;//color index
 8000308:	78ba      	ldrb	r2, [r7, #2]
 800030a:	4613      	mov	r3, r2
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	4413      	add	r3, r2
 8000310:	60bb      	str	r3, [r7, #8]
	//g
	leda[j++] = encoderLookup[k];
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	60fa      	str	r2, [r7, #12]
 8000318:	492e      	ldr	r1, [pc, #184]	; (80003d4 <setPixel+0xf0>)
 800031a:	68ba      	ldr	r2, [r7, #8]
 800031c:	440a      	add	r2, r1
 800031e:	7811      	ldrb	r1, [r2, #0]
 8000320:	4a2d      	ldr	r2, [pc, #180]	; (80003d8 <setPixel+0xf4>)
 8000322:	54d1      	strb	r1, [r2, r3]
	leda[j++] = encoderLookup[k+1];
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	1c59      	adds	r1, r3, #1
 800032c:	60f9      	str	r1, [r7, #12]
 800032e:	4929      	ldr	r1, [pc, #164]	; (80003d4 <setPixel+0xf0>)
 8000330:	5c89      	ldrb	r1, [r1, r2]
 8000332:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <setPixel+0xf4>)
 8000334:	54d1      	strb	r1, [r2, r3]
	leda[j++] = encoderLookup[k+2];
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	1c9a      	adds	r2, r3, #2
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	1c59      	adds	r1, r3, #1
 800033e:	60f9      	str	r1, [r7, #12]
 8000340:	4924      	ldr	r1, [pc, #144]	; (80003d4 <setPixel+0xf0>)
 8000342:	5c89      	ldrb	r1, [r1, r2]
 8000344:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <setPixel+0xf4>)
 8000346:	54d1      	strb	r1, [r2, r3]

	//r
	k = red*3;//color index
 8000348:	78fa      	ldrb	r2, [r7, #3]
 800034a:	4613      	mov	r3, r2
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	4413      	add	r3, r2
 8000350:	60bb      	str	r3, [r7, #8]
	leda[j++] = encoderLookup[k];
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	1c5a      	adds	r2, r3, #1
 8000356:	60fa      	str	r2, [r7, #12]
 8000358:	491e      	ldr	r1, [pc, #120]	; (80003d4 <setPixel+0xf0>)
 800035a:	68ba      	ldr	r2, [r7, #8]
 800035c:	440a      	add	r2, r1
 800035e:	7811      	ldrb	r1, [r2, #0]
 8000360:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <setPixel+0xf4>)
 8000362:	54d1      	strb	r1, [r2, r3]
	leda[j++] = encoderLookup[k+1];
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	1c59      	adds	r1, r3, #1
 800036c:	60f9      	str	r1, [r7, #12]
 800036e:	4919      	ldr	r1, [pc, #100]	; (80003d4 <setPixel+0xf0>)
 8000370:	5c89      	ldrb	r1, [r1, r2]
 8000372:	4a19      	ldr	r2, [pc, #100]	; (80003d8 <setPixel+0xf4>)
 8000374:	54d1      	strb	r1, [r2, r3]
	leda[j++] = encoderLookup[k+2];
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	1c9a      	adds	r2, r3, #2
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1c59      	adds	r1, r3, #1
 800037e:	60f9      	str	r1, [r7, #12]
 8000380:	4914      	ldr	r1, [pc, #80]	; (80003d4 <setPixel+0xf0>)
 8000382:	5c89      	ldrb	r1, [r1, r2]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <setPixel+0xf4>)
 8000386:	54d1      	strb	r1, [r2, r3]

	//b
	k = blue*3;//color index
 8000388:	787a      	ldrb	r2, [r7, #1]
 800038a:	4613      	mov	r3, r2
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	4413      	add	r3, r2
 8000390:	60bb      	str	r3, [r7, #8]
	leda[j++] = encoderLookup[k];
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	1c5a      	adds	r2, r3, #1
 8000396:	60fa      	str	r2, [r7, #12]
 8000398:	490e      	ldr	r1, [pc, #56]	; (80003d4 <setPixel+0xf0>)
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	440a      	add	r2, r1
 800039e:	7811      	ldrb	r1, [r2, #0]
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <setPixel+0xf4>)
 80003a2:	54d1      	strb	r1, [r2, r3]
	leda[j++] = encoderLookup[k+1];
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	1c59      	adds	r1, r3, #1
 80003ac:	60f9      	str	r1, [r7, #12]
 80003ae:	4909      	ldr	r1, [pc, #36]	; (80003d4 <setPixel+0xf0>)
 80003b0:	5c89      	ldrb	r1, [r1, r2]
 80003b2:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <setPixel+0xf4>)
 80003b4:	54d1      	strb	r1, [r2, r3]
	leda[j] = encoderLookup[k+2];
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	3302      	adds	r3, #2
 80003ba:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <setPixel+0xf0>)
 80003bc:	5cd1      	ldrb	r1, [r2, r3]
 80003be:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <setPixel+0xf4>)
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	4413      	add	r3, r2
 80003c4:	460a      	mov	r2, r1
 80003c6:	701a      	strb	r2, [r3, #0]

}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	08007790 	.word	0x08007790
 80003d8:	200019c8 	.word	0x200019c8

080003dc <setPixel_foreground>:

// Set a LED color for foreground pixel used by fonts
void setPixel_foreground(int Pixel, uint8_t red, uint8_t green, uint8_t blue) {
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	4608      	mov	r0, r1
 80003e6:	4611      	mov	r1, r2
 80003e8:	461a      	mov	r2, r3
 80003ea:	4603      	mov	r3, r0
 80003ec:	70fb      	strb	r3, [r7, #3]
 80003ee:	460b      	mov	r3, r1
 80003f0:	70bb      	strb	r3, [r7, #2]
 80003f2:	4613      	mov	r3, r2
 80003f4:	707b      	strb	r3, [r7, #1]
	uint32_t j,k;

	j = Pixel*9;
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	4613      	mov	r3, r2
 80003fa:	00db      	lsls	r3, r3, #3
 80003fc:	4413      	add	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]

	k = green*3;//color index
 8000400:	78ba      	ldrb	r2, [r7, #2]
 8000402:	4613      	mov	r3, r2
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4413      	add	r3, r2
 8000408:	60bb      	str	r3, [r7, #8]
	//g
	leda_foreground[j++] = encoderLookup[k];
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	60fa      	str	r2, [r7, #12]
 8000410:	492e      	ldr	r1, [pc, #184]	; (80004cc <setPixel_foreground+0xf0>)
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	440a      	add	r2, r1
 8000416:	7811      	ldrb	r1, [r2, #0]
 8000418:	4a2d      	ldr	r2, [pc, #180]	; (80004d0 <setPixel_foreground+0xf4>)
 800041a:	54d1      	strb	r1, [r2, r3]
	leda_foreground[j++] = encoderLookup[k+1];
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	1c59      	adds	r1, r3, #1
 8000424:	60f9      	str	r1, [r7, #12]
 8000426:	4929      	ldr	r1, [pc, #164]	; (80004cc <setPixel_foreground+0xf0>)
 8000428:	5c89      	ldrb	r1, [r1, r2]
 800042a:	4a29      	ldr	r2, [pc, #164]	; (80004d0 <setPixel_foreground+0xf4>)
 800042c:	54d1      	strb	r1, [r2, r3]
	leda_foreground[j++] = encoderLookup[k+2];
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	1c9a      	adds	r2, r3, #2
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	1c59      	adds	r1, r3, #1
 8000436:	60f9      	str	r1, [r7, #12]
 8000438:	4924      	ldr	r1, [pc, #144]	; (80004cc <setPixel_foreground+0xf0>)
 800043a:	5c89      	ldrb	r1, [r1, r2]
 800043c:	4a24      	ldr	r2, [pc, #144]	; (80004d0 <setPixel_foreground+0xf4>)
 800043e:	54d1      	strb	r1, [r2, r3]

	//r
	k = red*3;//color index
 8000440:	78fa      	ldrb	r2, [r7, #3]
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	60bb      	str	r3, [r7, #8]
	leda_foreground[j++] = encoderLookup[k];
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	1c5a      	adds	r2, r3, #1
 800044e:	60fa      	str	r2, [r7, #12]
 8000450:	491e      	ldr	r1, [pc, #120]	; (80004cc <setPixel_foreground+0xf0>)
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	440a      	add	r2, r1
 8000456:	7811      	ldrb	r1, [r2, #0]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <setPixel_foreground+0xf4>)
 800045a:	54d1      	strb	r1, [r2, r3]
	leda_foreground[j++] = encoderLookup[k+1];
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	1c59      	adds	r1, r3, #1
 8000464:	60f9      	str	r1, [r7, #12]
 8000466:	4919      	ldr	r1, [pc, #100]	; (80004cc <setPixel_foreground+0xf0>)
 8000468:	5c89      	ldrb	r1, [r1, r2]
 800046a:	4a19      	ldr	r2, [pc, #100]	; (80004d0 <setPixel_foreground+0xf4>)
 800046c:	54d1      	strb	r1, [r2, r3]
	leda_foreground[j++] = encoderLookup[k+2];
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	1c9a      	adds	r2, r3, #2
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	1c59      	adds	r1, r3, #1
 8000476:	60f9      	str	r1, [r7, #12]
 8000478:	4914      	ldr	r1, [pc, #80]	; (80004cc <setPixel_foreground+0xf0>)
 800047a:	5c89      	ldrb	r1, [r1, r2]
 800047c:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <setPixel_foreground+0xf4>)
 800047e:	54d1      	strb	r1, [r2, r3]

	//b
	k = blue*3;//color index
 8000480:	787a      	ldrb	r2, [r7, #1]
 8000482:	4613      	mov	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	4413      	add	r3, r2
 8000488:	60bb      	str	r3, [r7, #8]
	leda_foreground[j++] = encoderLookup[k];
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	1c5a      	adds	r2, r3, #1
 800048e:	60fa      	str	r2, [r7, #12]
 8000490:	490e      	ldr	r1, [pc, #56]	; (80004cc <setPixel_foreground+0xf0>)
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	440a      	add	r2, r1
 8000496:	7811      	ldrb	r1, [r2, #0]
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <setPixel_foreground+0xf4>)
 800049a:	54d1      	strb	r1, [r2, r3]
	leda_foreground[j++] = encoderLookup[k+1];
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	1c59      	adds	r1, r3, #1
 80004a4:	60f9      	str	r1, [r7, #12]
 80004a6:	4909      	ldr	r1, [pc, #36]	; (80004cc <setPixel_foreground+0xf0>)
 80004a8:	5c89      	ldrb	r1, [r1, r2]
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <setPixel_foreground+0xf4>)
 80004ac:	54d1      	strb	r1, [r2, r3]
	leda_foreground[j] = encoderLookup[k+2];
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	3302      	adds	r3, #2
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <setPixel_foreground+0xf0>)
 80004b4:	5cd1      	ldrb	r1, [r2, r3]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <setPixel_foreground+0xf4>)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4413      	add	r3, r2
 80004bc:	460a      	mov	r2, r1
 80004be:	701a      	strb	r2, [r3, #0]

}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	08007790 	.word	0x08007790
 80004d0:	20001fd0 	.word	0x20001fd0

080004d4 <setAll>:

void setAll(uint8_t red, uint8_t green, uint8_t blue){
 80004d4:	b480      	push	{r7}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	460b      	mov	r3, r1
 80004e0:	71bb      	strb	r3, [r7, #6]
 80004e2:	4613      	mov	r3, r2
 80004e4:	717b      	strb	r3, [r7, #5]
	uint32_t i,j,k;

	for(i = 0;i < NUM_LEDS;i++){
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e067      	b.n	80005bc <setAll+0xe8>
		//setPixel(i,red,green,blue);
		j=i*9;
 80004ec:	697a      	ldr	r2, [r7, #20]
 80004ee:	4613      	mov	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	4413      	add	r3, r2
 80004f4:	613b      	str	r3, [r7, #16]
		k = green*3;//color index
 80004f6:	79ba      	ldrb	r2, [r7, #6]
 80004f8:	4613      	mov	r3, r2
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	4413      	add	r3, r2
 80004fe:	60fb      	str	r3, [r7, #12]
		//g
		leda[j++] = encoderLookup[k];
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	613a      	str	r2, [r7, #16]
 8000506:	4931      	ldr	r1, [pc, #196]	; (80005cc <setAll+0xf8>)
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	440a      	add	r2, r1
 800050c:	7811      	ldrb	r1, [r2, #0]
 800050e:	4a30      	ldr	r2, [pc, #192]	; (80005d0 <setAll+0xfc>)
 8000510:	54d1      	strb	r1, [r2, r3]
		leda[j++] = encoderLookup[k+1];
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	1c5a      	adds	r2, r3, #1
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1c59      	adds	r1, r3, #1
 800051a:	6139      	str	r1, [r7, #16]
 800051c:	492b      	ldr	r1, [pc, #172]	; (80005cc <setAll+0xf8>)
 800051e:	5c89      	ldrb	r1, [r1, r2]
 8000520:	4a2b      	ldr	r2, [pc, #172]	; (80005d0 <setAll+0xfc>)
 8000522:	54d1      	strb	r1, [r2, r3]
		leda[j++] = encoderLookup[k+2];
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	1c9a      	adds	r2, r3, #2
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	1c59      	adds	r1, r3, #1
 800052c:	6139      	str	r1, [r7, #16]
 800052e:	4927      	ldr	r1, [pc, #156]	; (80005cc <setAll+0xf8>)
 8000530:	5c89      	ldrb	r1, [r1, r2]
 8000532:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <setAll+0xfc>)
 8000534:	54d1      	strb	r1, [r2, r3]

		//r
		k = red*3;//color index
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	4413      	add	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
		leda[j++] = encoderLookup[k];
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	613a      	str	r2, [r7, #16]
 8000546:	4921      	ldr	r1, [pc, #132]	; (80005cc <setAll+0xf8>)
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	440a      	add	r2, r1
 800054c:	7811      	ldrb	r1, [r2, #0]
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <setAll+0xfc>)
 8000550:	54d1      	strb	r1, [r2, r3]
		leda[j++] = encoderLookup[k+1];
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	1c5a      	adds	r2, r3, #1
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	6139      	str	r1, [r7, #16]
 800055c:	491b      	ldr	r1, [pc, #108]	; (80005cc <setAll+0xf8>)
 800055e:	5c89      	ldrb	r1, [r1, r2]
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <setAll+0xfc>)
 8000562:	54d1      	strb	r1, [r2, r3]
		leda[j++] = encoderLookup[k+2];
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	1c9a      	adds	r2, r3, #2
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	1c59      	adds	r1, r3, #1
 800056c:	6139      	str	r1, [r7, #16]
 800056e:	4917      	ldr	r1, [pc, #92]	; (80005cc <setAll+0xf8>)
 8000570:	5c89      	ldrb	r1, [r1, r2]
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <setAll+0xfc>)
 8000574:	54d1      	strb	r1, [r2, r3]

		//b
		k = blue*3;//color index
 8000576:	797a      	ldrb	r2, [r7, #5]
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
		leda[j++] = encoderLookup[k];
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	613a      	str	r2, [r7, #16]
 8000586:	4911      	ldr	r1, [pc, #68]	; (80005cc <setAll+0xf8>)
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	440a      	add	r2, r1
 800058c:	7811      	ldrb	r1, [r2, #0]
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <setAll+0xfc>)
 8000590:	54d1      	strb	r1, [r2, r3]
		leda[j++] = encoderLookup[k+1];
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	1c5a      	adds	r2, r3, #1
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	1c59      	adds	r1, r3, #1
 800059a:	6139      	str	r1, [r7, #16]
 800059c:	490b      	ldr	r1, [pc, #44]	; (80005cc <setAll+0xf8>)
 800059e:	5c89      	ldrb	r1, [r1, r2]
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <setAll+0xfc>)
 80005a2:	54d1      	strb	r1, [r2, r3]
		leda[j] = encoderLookup[k+2];
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3302      	adds	r3, #2
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <setAll+0xf8>)
 80005aa:	5cd1      	ldrb	r1, [r2, r3]
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <setAll+0xfc>)
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	4413      	add	r3, r2
 80005b2:	460a      	mov	r2, r1
 80005b4:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < NUM_LEDS;i++){
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	3301      	adds	r3, #1
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2ba0      	cmp	r3, #160	; 0xa0
 80005c0:	d994      	bls.n	80004ec <setAll+0x18>
	}
}
 80005c2:	bf00      	nop
 80005c4:	371c      	adds	r7, #28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	08007790 	.word	0x08007790
 80005d0:	200019c8 	.word	0x200019c8

080005d4 <copyForegroundPixel>:
		leda_foreground[j++] = encoderLookup[k+1];
		leda_foreground[j] = encoderLookup[k+2];
	}
}

void copyForegroundPixel(int Pixel){
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	uint32_t j;

	j = Pixel*9;
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4613      	mov	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]

	leda[j] = leda_foreground[j]; j++;
 80005e6:	4a37      	ldr	r2, [pc, #220]	; (80006c4 <copyForegroundPixel+0xf0>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	7819      	ldrb	r1, [r3, #0]
 80005ee:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <copyForegroundPixel+0xf4>)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	460a      	mov	r2, r1
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
	leda[j] = leda_foreground[j]; j++;
 80005fe:	4a31      	ldr	r2, [pc, #196]	; (80006c4 <copyForegroundPixel+0xf0>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	7819      	ldrb	r1, [r3, #0]
 8000606:	4a30      	ldr	r2, [pc, #192]	; (80006c8 <copyForegroundPixel+0xf4>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	460a      	mov	r2, r1
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
	leda[j] = leda_foreground[j]; j++;
 8000616:	4a2b      	ldr	r2, [pc, #172]	; (80006c4 <copyForegroundPixel+0xf0>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	7819      	ldrb	r1, [r3, #0]
 800061e:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <copyForegroundPixel+0xf4>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	460a      	mov	r2, r1
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]

	leda[j] = leda_foreground[j]; j++;
 800062e:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <copyForegroundPixel+0xf0>)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	7819      	ldrb	r1, [r3, #0]
 8000636:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <copyForegroundPixel+0xf4>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	460a      	mov	r2, r1
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
	leda[j] = leda_foreground[j]; j++;
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <copyForegroundPixel+0xf0>)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <copyForegroundPixel+0xf4>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
	leda[j] = leda_foreground[j]; j++;
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <copyForegroundPixel+0xf0>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	7819      	ldrb	r1, [r3, #0]
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <copyForegroundPixel+0xf4>)
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	460a      	mov	r2, r1
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3301      	adds	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]

	leda[j] = leda_foreground[j]; j++;
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <copyForegroundPixel+0xf0>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	7819      	ldrb	r1, [r3, #0]
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <copyForegroundPixel+0xf4>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	460a      	mov	r2, r1
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
	leda[j] = leda_foreground[j]; j++;
 800068e:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <copyForegroundPixel+0xf0>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4413      	add	r3, r2
 8000694:	7819      	ldrb	r1, [r3, #0]
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <copyForegroundPixel+0xf4>)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
	leda[j] = leda_foreground[j];
 80006a6:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <copyForegroundPixel+0xf0>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4413      	add	r3, r2
 80006ac:	7819      	ldrb	r1, [r3, #0]
 80006ae:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <copyForegroundPixel+0xf4>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	460a      	mov	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]

}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20001fd0 	.word	0x20001fd0
 80006c8:	200019c8 	.word	0x200019c8

080006cc <showStrip>:

void showStrip(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	while(HAL_DMA_GetState(&hdma_spi1_tx) != HAL_DMA_STATE_READY);
 80006d0:	bf00      	nop
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <showStrip+0x30>)
 80006d4:	f001 fcfc 	bl	80020d0 <HAL_DMA_GetState>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d1f9      	bne.n	80006d2 <showStrip+0x6>
	leda[TOTAL_PIXELS_DATA_SIZE-1] = 0x00; // workaround to keep mosi low by default
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <showStrip+0x34>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
	osDelay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f004 fb9a 	bl	8004e20 <osDelay>
	HAL_SPI_Transmit_DMA(&hspi1, leda, TOTAL_PIXELS_DATA_SIZE);
 80006ec:	f240 52aa 	movw	r2, #1450	; 0x5aa
 80006f0:	4903      	ldr	r1, [pc, #12]	; (8000700 <showStrip+0x34>)
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <showStrip+0x38>)
 80006f4:	f003 fa44 	bl	8003b80 <HAL_SPI_Transmit_DMA>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200026bc 	.word	0x200026bc
 8000700:	200019c8 	.word	0x200019c8
 8000704:	20002664 	.word	0x20002664

08000708 <rainbowCycle_foreground>:
		}
		if(++j >= 256) j=0;//TODO:
	}
}

void rainbowCycle_foreground(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	uint8_t *c;
	static uint16_t i = 0, j = 0;

	if(j<256) { //cycles of all colors on wheel
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <rainbowCycle_foreground+0x94>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2bff      	cmp	r3, #255	; 0xff
 8000714:	d83e      	bhi.n	8000794 <rainbowCycle_foreground+0x8c>
		if(i< NUM_LEDS) {
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <rainbowCycle_foreground+0x98>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	2ba0      	cmp	r3, #160	; 0xa0
 800071c:	d83a      	bhi.n	8000794 <rainbowCycle_foreground+0x8c>
			c=Wheel(((i * 256 / NUM_LEDS) + j) & 255);
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <rainbowCycle_foreground+0x98>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <rainbowCycle_foreground+0x9c>)
 8000726:	fb82 1203 	smull	r1, r2, r2, r3
 800072a:	441a      	add	r2, r3
 800072c:	11d2      	asrs	r2, r2, #7
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <rainbowCycle_foreground+0x94>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4413      	add	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f832 	bl	80007a8 <Wheel>
 8000744:	6078      	str	r0, [r7, #4]
			setPixel_foreground(i, *c, *(c+1), *(c+2));
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <rainbowCycle_foreground+0x98>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7819      	ldrb	r1, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3302      	adds	r3, #2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f7ff fe3e 	bl	80003dc <setPixel_foreground>
			if(++i >= NUM_LEDS){
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <rainbowCycle_foreground+0x98>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <rainbowCycle_foreground+0x98>)
 800076a:	801a      	strh	r2, [r3, #0]
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <rainbowCycle_foreground+0x98>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	2ba0      	cmp	r3, #160	; 0xa0
 8000772:	d90f      	bls.n	8000794 <rainbowCycle_foreground+0x8c>
				i=0;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <rainbowCycle_foreground+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	801a      	strh	r2, [r3, #0]
				if(++j >= 256) {
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <rainbowCycle_foreground+0x94>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <rainbowCycle_foreground+0x94>)
 8000784:	801a      	strh	r2, [r3, #0]
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <rainbowCycle_foreground+0x94>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2bff      	cmp	r3, #255	; 0xff
 800078c:	d902      	bls.n	8000794 <rainbowCycle_foreground+0x8c>
					j=0;//TODO:
 800078e:	4b03      	ldr	r3, [pc, #12]	; (800079c <rainbowCycle_foreground+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000b2 	.word	0x200000b2
 80007a0:	200000b4 	.word	0x200000b4
 80007a4:	cb8727c1 	.word	0xcb8727c1

080007a8 <Wheel>:

// used by rainbowCycle and theaterChaseRainbow
uint8_t * Wheel(uint8_t WheelPos) {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	static uint8_t c[3];

	if(WheelPos < 85) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b54      	cmp	r3, #84	; 0x54
 80007b6:	d813      	bhi.n	80007e0 <Wheel+0x38>
		c[0]=WheelPos * 3;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	461a      	mov	r2, r3
 80007bc:	0052      	lsls	r2, r2, #1
 80007be:	4413      	add	r3, r2
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <Wheel+0xa4>)
 80007c4:	701a      	strb	r2, [r3, #0]
		c[1]=255 - WheelPos * 3;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	461a      	mov	r2, r3
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <Wheel+0xa4>)
 80007d6:	705a      	strb	r2, [r3, #1]
		c[2]=0;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <Wheel+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	709a      	strb	r2, [r3, #2]
 80007de:	e02f      	b.n	8000840 <Wheel+0x98>
	} else if(WheelPos < 170) {
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2ba9      	cmp	r3, #169	; 0xa9
 80007e4:	d816      	bhi.n	8000814 <Wheel+0x6c>
		WheelPos -= 85;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3b55      	subs	r3, #85	; 0x55
 80007ea:	71fb      	strb	r3, [r7, #7]
		c[0]=255 - WheelPos * 3;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	461a      	mov	r2, r3
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	3b01      	subs	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <Wheel+0xa4>)
 80007fc:	701a      	strb	r2, [r3, #0]
		c[1]=0;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <Wheel+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	705a      	strb	r2, [r3, #1]
		c[2]=WheelPos * 3;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	461a      	mov	r2, r3
 8000808:	0052      	lsls	r2, r2, #1
 800080a:	4413      	add	r3, r2
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <Wheel+0xa4>)
 8000810:	709a      	strb	r2, [r3, #2]
 8000812:	e015      	b.n	8000840 <Wheel+0x98>
	} else {
		WheelPos -= 170;
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	3356      	adds	r3, #86	; 0x56
 8000818:	71fb      	strb	r3, [r7, #7]
		c[0]=0;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <Wheel+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
		c[1]=WheelPos * 3;
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	461a      	mov	r2, r3
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	4413      	add	r3, r2
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <Wheel+0xa4>)
 800082c:	705a      	strb	r2, [r3, #1]
		c[2]=255 - WheelPos * 3;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	461a      	mov	r2, r3
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	3b01      	subs	r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <Wheel+0xa4>)
 800083e:	709a      	strb	r2, [r3, #2]
	}

	return c;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <Wheel+0xa4>)
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	200000b8 	.word	0x200000b8

08000850 <home>:

void home(void){
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	current_position = 0;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <home+0x14>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2000265c 	.word	0x2000265c

08000868 <putchar_fg_a>:
		current_position += 6;

	}
}

void putchar_fg_a(uint8_t prev_c, uint8_t c, t_font_size f_size,uint8_t row_offset){
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	4604      	mov	r4, r0
 8000870:	4608      	mov	r0, r1
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	4623      	mov	r3, r4
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	4603      	mov	r3, r0
 800087c:	71bb      	strb	r3, [r7, #6]
 800087e:	460b      	mov	r3, r1
 8000880:	717b      	strb	r3, [r7, #5]
 8000882:	4613      	mov	r3, r2
 8000884:	713b      	strb	r3, [r7, #4]
	uint32_t i,j;
	uint8_t k,kp,l,lp;

	if(row_offset > 7) {
 8000886:	793b      	ldrb	r3, [r7, #4]
 8000888:	2b07      	cmp	r3, #7
 800088a:	d901      	bls.n	8000890 <putchar_fg_a+0x28>
		row_offset = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	713b      	strb	r3, [r7, #4]
	}

	//row_offset = 1;

	if(f_size == THREE_BY_FIVE){
 8000890:	797b      	ldrb	r3, [r7, #5]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d152      	bne.n	800093c <putchar_fg_a+0xd4>

		for(i=0;i<7;i++){ // row loop
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e046      	b.n	800092a <putchar_fg_a+0xc2>
			j = OFFSET + current_position + (i * NUM_COLUMN);
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	4613      	mov	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b88      	ldr	r3, [pc, #544]	; (8000acc <putchar_fg_a+0x264>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	3301      	adds	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]

			k = (0x1 << i);
 80008b2:	2201      	movs	r2, #1
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	73fb      	strb	r3, [r7, #15]

			if((charmap_three_by_five[c][0] & k)) copyForegroundPixel(j);
 80008bc:	79ba      	ldrb	r2, [r7, #6]
 80008be:	4984      	ldr	r1, [pc, #528]	; (8000ad0 <putchar_fg_a+0x268>)
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	4013      	ands	r3, r2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <putchar_fg_a+0x74>
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe7c 	bl	80005d4 <copyForegroundPixel>
			if((charmap_three_by_five[c][1] & k)) copyForegroundPixel(j+1);
 80008dc:	79ba      	ldrb	r2, [r7, #6]
 80008de:	497c      	ldr	r1, [pc, #496]	; (8000ad0 <putchar_fg_a+0x268>)
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	3301      	adds	r3, #1
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4013      	ands	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d004      	beq.n	8000900 <putchar_fg_a+0x98>
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	3301      	adds	r3, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe6a 	bl	80005d4 <copyForegroundPixel>
			if((charmap_three_by_five[c][2] & k)) copyForegroundPixel(j+2);
 8000900:	79ba      	ldrb	r2, [r7, #6]
 8000902:	4973      	ldr	r1, [pc, #460]	; (8000ad0 <putchar_fg_a+0x268>)
 8000904:	4613      	mov	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	440b      	add	r3, r1
 800090c:	3302      	adds	r3, #2
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4013      	ands	r3, r2
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <putchar_fg_a+0xbc>
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	3302      	adds	r3, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe58 	bl	80005d4 <copyForegroundPixel>
		for(i=0;i<7;i++){ // row loop
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	2b06      	cmp	r3, #6
 800092e:	d9b5      	bls.n	800089c <putchar_fg_a+0x34>
		}

		current_position += 4;
 8000930:	4b66      	ldr	r3, [pc, #408]	; (8000acc <putchar_fg_a+0x264>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	4a65      	ldr	r2, [pc, #404]	; (8000acc <putchar_fg_a+0x264>)
 8000938:	6013      	str	r3, [r2, #0]
		}

		current_position += 6;

	}
}
 800093a:	e29a      	b.n	8000e72 <putchar_fg_a+0x60a>
	} else if(f_size == THREE_BY_SEVEN){
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d152      	bne.n	80009e8 <putchar_fg_a+0x180>
		for(i=0;i<7;i++){ // row loop
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e046      	b.n	80009d6 <putchar_fg_a+0x16e>
			j = OFFSET + current_position + (i * NUM_COLUMN);
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	461a      	mov	r2, r3
 8000954:	4b5d      	ldr	r3, [pc, #372]	; (8000acc <putchar_fg_a+0x264>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4413      	add	r3, r2
 800095a:	3301      	adds	r3, #1
 800095c:	613b      	str	r3, [r7, #16]
			k = (0x1 << i);
 800095e:	2201      	movs	r2, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	73fb      	strb	r3, [r7, #15]
			if((charmap_three_by_seven[c][0] & k)) copyForegroundPixel(j);
 8000968:	79ba      	ldrb	r2, [r7, #6]
 800096a:	495a      	ldr	r1, [pc, #360]	; (8000ad4 <putchar_fg_a+0x26c>)
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	440b      	add	r3, r1
 8000974:	781a      	ldrb	r2, [r3, #0]
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	4013      	ands	r3, r2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <putchar_fg_a+0x120>
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe26 	bl	80005d4 <copyForegroundPixel>
			if((charmap_three_by_seven[c][1] & k)) copyForegroundPixel(j+1);
 8000988:	79ba      	ldrb	r2, [r7, #6]
 800098a:	4952      	ldr	r1, [pc, #328]	; (8000ad4 <putchar_fg_a+0x26c>)
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	440b      	add	r3, r1
 8000994:	3301      	adds	r3, #1
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	4013      	ands	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d004      	beq.n	80009ac <putchar_fg_a+0x144>
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe14 	bl	80005d4 <copyForegroundPixel>
			if((charmap_three_by_seven[c][2] & k)) copyForegroundPixel(j+2);
 80009ac:	79ba      	ldrb	r2, [r7, #6]
 80009ae:	4949      	ldr	r1, [pc, #292]	; (8000ad4 <putchar_fg_a+0x26c>)
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	3302      	adds	r3, #2
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	4013      	ands	r3, r2
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d004      	beq.n	80009d0 <putchar_fg_a+0x168>
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	3302      	adds	r3, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe02 	bl	80005d4 <copyForegroundPixel>
		for(i=0;i<7;i++){ // row loop
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3301      	adds	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	2b06      	cmp	r3, #6
 80009da:	d9b5      	bls.n	8000948 <putchar_fg_a+0xe0>
		current_position += 4;
 80009dc:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <putchar_fg_a+0x264>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3304      	adds	r3, #4
 80009e2:	4a3a      	ldr	r2, [pc, #232]	; (8000acc <putchar_fg_a+0x264>)
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	e244      	b.n	8000e72 <putchar_fg_a+0x60a>
	} else if(f_size == FOUR_BY_SEVEN){
 80009e8:	797b      	ldrb	r3, [r7, #5]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	f040 80ec 	bne.w	8000bc8 <putchar_fg_a+0x360>
		for(i=0;i<7;i++){ // row loop
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e064      	b.n	8000ac0 <putchar_fg_a+0x258>
			j = OFFSET + current_position + (i * NUM_COLUMN);
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <putchar_fg_a+0x264>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	3301      	adds	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
			k = (0x01 << i);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	73fb      	strb	r3, [r7, #15]
			l = charmap_four_by_seven[c][0] >> row_offset;
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	4a2f      	ldr	r2, [pc, #188]	; (8000ad8 <putchar_fg_a+0x270>)
 8000a1a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	793b      	ldrb	r3, [r7, #4]
 8000a22:	fa42 f303 	asr.w	r3, r2, r3
 8000a26:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j);
 8000a28:	7bba      	ldrb	r2, [r7, #14]
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <putchar_fg_a+0x1d4>
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fdcc 	bl	80005d4 <copyForegroundPixel>
			l = charmap_four_by_seven[c][1] >> row_offset;
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <putchar_fg_a+0x270>)
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	461a      	mov	r2, r3
 8000a48:	793b      	ldrb	r3, [r7, #4]
 8000a4a:	fa42 f303 	asr.w	r3, r2, r3
 8000a4e:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j+1);
 8000a50:	7bba      	ldrb	r2, [r7, #14]
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d004      	beq.n	8000a66 <putchar_fg_a+0x1fe>
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fdb7 	bl	80005d4 <copyForegroundPixel>
			l = charmap_four_by_seven[c][2] >> row_offset;
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <putchar_fg_a+0x270>)
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	461a      	mov	r2, r3
 8000a72:	793b      	ldrb	r3, [r7, #4]
 8000a74:	fa42 f303 	asr.w	r3, r2, r3
 8000a78:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j+2);
 8000a7a:	7bba      	ldrb	r2, [r7, #14]
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <putchar_fg_a+0x228>
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	3302      	adds	r3, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fda2 	bl	80005d4 <copyForegroundPixel>
			l = charmap_four_by_seven[c][3] >> row_offset;
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <putchar_fg_a+0x270>)
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	78db      	ldrb	r3, [r3, #3]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	793b      	ldrb	r3, [r7, #4]
 8000a9e:	fa42 f303 	asr.w	r3, r2, r3
 8000aa2:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j+3);
 8000aa4:	7bba      	ldrb	r2, [r7, #14]
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d004      	beq.n	8000aba <putchar_fg_a+0x252>
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	3303      	adds	r3, #3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd8d 	bl	80005d4 <copyForegroundPixel>
		for(i=0;i<7;i++){ // row loop
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d997      	bls.n	80009f6 <putchar_fg_a+0x18e>
		for(i=0;i<8;i++){ // row loop
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e074      	b.n	8000bb6 <putchar_fg_a+0x34e>
 8000acc:	2000265c 	.word	0x2000265c
 8000ad0:	08007a90 	.word	0x08007a90
 8000ad4:	08007bbc 	.word	0x08007bbc
 8000ad8:	08007ce8 	.word	0x08007ce8
			j = OFFSET + current_position + (i * NUM_COLUMN);
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4ba5      	ldr	r3, [pc, #660]	; (8000d80 <putchar_fg_a+0x518>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	3301      	adds	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
			k = (0x01 << i);
 8000af2:	2201      	movs	r2, #1
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	73fb      	strb	r3, [r7, #15]
			l = charmap_four_by_seven[prev_c][0] << (8-row_offset);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4aa1      	ldr	r2, [pc, #644]	; (8000d84 <putchar_fg_a+0x51c>)
 8000b00:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000b04:	461a      	mov	r2, r3
 8000b06:	793b      	ldrb	r3, [r7, #4]
 8000b08:	f1c3 0308 	rsb	r3, r3, #8
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j);
 8000b12:	7bba      	ldrb	r2, [r7, #14]
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4013      	ands	r3, r2
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <putchar_fg_a+0x2be>
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd57 	bl	80005d4 <copyForegroundPixel>
			l = charmap_four_by_seven[prev_c][1] << (8-row_offset);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a96      	ldr	r2, [pc, #600]	; (8000d84 <putchar_fg_a+0x51c>)
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	785b      	ldrb	r3, [r3, #1]
 8000b30:	461a      	mov	r2, r3
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	f1c3 0308 	rsb	r3, r3, #8
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j+1);
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	4013      	ands	r3, r2
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d004      	beq.n	8000b54 <putchar_fg_a+0x2ec>
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd40 	bl	80005d4 <copyForegroundPixel>
			l = charmap_four_by_seven[prev_c][2] << (8-row_offset);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4a8b      	ldr	r2, [pc, #556]	; (8000d84 <putchar_fg_a+0x51c>)
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	789b      	ldrb	r3, [r3, #2]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	793b      	ldrb	r3, [r7, #4]
 8000b62:	f1c3 0308 	rsb	r3, r3, #8
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j+2);
 8000b6c:	7bba      	ldrb	r2, [r7, #14]
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	4013      	ands	r3, r2
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d004      	beq.n	8000b82 <putchar_fg_a+0x31a>
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fd29 	bl	80005d4 <copyForegroundPixel>
			l = charmap_four_by_seven[prev_c][3] << (8-row_offset);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a7f      	ldr	r2, [pc, #508]	; (8000d84 <putchar_fg_a+0x51c>)
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	793b      	ldrb	r3, [r7, #4]
 8000b90:	f1c3 0308 	rsb	r3, r3, #8
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	73bb      	strb	r3, [r7, #14]
			if((l & k)) copyForegroundPixel(j+3);
 8000b9a:	7bba      	ldrb	r2, [r7, #14]
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <putchar_fg_a+0x348>
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3303      	adds	r3, #3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd12 	bl	80005d4 <copyForegroundPixel>
		for(i=0;i<8;i++){ // row loop
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	d98f      	bls.n	8000adc <putchar_fg_a+0x274>
		current_position += 5;
 8000bbc:	4b70      	ldr	r3, [pc, #448]	; (8000d80 <putchar_fg_a+0x518>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3305      	adds	r3, #5
 8000bc2:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <putchar_fg_a+0x518>)
 8000bc4:	6013      	str	r3, [r2, #0]
}
 8000bc6:	e154      	b.n	8000e72 <putchar_fg_a+0x60a>
	} else if(f_size == FOUR_BY_EIGHT){
 8000bc8:	797b      	ldrb	r3, [r7, #5]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d158      	bne.n	8000c80 <putchar_fg_a+0x418>
		for(i=0;i<7;i++){ // row loop
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e04c      	b.n	8000c6e <putchar_fg_a+0x406>
			j = OFFSET + current_position + (i * NUM_COLUMN);
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b67      	ldr	r3, [pc, #412]	; (8000d80 <putchar_fg_a+0x518>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3301      	adds	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
			k = (0x1 << i);
 8000bea:	2201      	movs	r2, #1
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	73fb      	strb	r3, [r7, #15]
			if((charmap_four_by_seven[c][0] & k)) copyForegroundPixel(j);
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	4a63      	ldr	r2, [pc, #396]	; (8000d84 <putchar_fg_a+0x51c>)
 8000bf8:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <putchar_fg_a+0x3a6>
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fce3 	bl	80005d4 <copyForegroundPixel>
			if((charmap_four_by_seven[c][1] & k)) copyForegroundPixel(j+1);
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	4a5c      	ldr	r2, [pc, #368]	; (8000d84 <putchar_fg_a+0x51c>)
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	785a      	ldrb	r2, [r3, #1]
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d004      	beq.n	8000c2c <putchar_fg_a+0x3c4>
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fcd4 	bl	80005d4 <copyForegroundPixel>
			if((charmap_four_by_seven[c][2] & k)) copyForegroundPixel(j+2);
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	4a55      	ldr	r2, [pc, #340]	; (8000d84 <putchar_fg_a+0x51c>)
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	789a      	ldrb	r2, [r3, #2]
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d004      	beq.n	8000c4a <putchar_fg_a+0x3e2>
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	3302      	adds	r3, #2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcc5 	bl	80005d4 <copyForegroundPixel>
			if((charmap_four_by_seven[c][3] & k)) copyForegroundPixel(j+3);
 8000c4a:	79bb      	ldrb	r3, [r7, #6]
 8000c4c:	4a4d      	ldr	r2, [pc, #308]	; (8000d84 <putchar_fg_a+0x51c>)
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	78da      	ldrb	r2, [r3, #3]
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	4013      	ands	r3, r2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d004      	beq.n	8000c68 <putchar_fg_a+0x400>
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	3303      	adds	r3, #3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fcb6 	bl	80005d4 <copyForegroundPixel>
		for(i=0;i<7;i++){ // row loop
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d9af      	bls.n	8000bd4 <putchar_fg_a+0x36c>
		current_position += 5;
 8000c74:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <putchar_fg_a+0x518>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3305      	adds	r3, #5
 8000c7a:	4a41      	ldr	r2, [pc, #260]	; (8000d80 <putchar_fg_a+0x518>)
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	e0f8      	b.n	8000e72 <putchar_fg_a+0x60a>
	} else if(f_size == FIVE_BY_SEVEN){
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d176      	bne.n	8000d74 <putchar_fg_a+0x50c>
		for(i=0;i<7;i++){ // row loop
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e06a      	b.n	8000d62 <putchar_fg_a+0x4fa>
			j = OFFSET + current_position + (i * NUM_COLUMN);
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <putchar_fg_a+0x518>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
			k = (0x1 << i);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	73fb      	strb	r3, [r7, #15]
			if((charmap_five_by_seven[c][0] & k)) copyForegroundPixel(j);
 8000cac:	79ba      	ldrb	r2, [r7, #6]
 8000cae:	4936      	ldr	r1, [pc, #216]	; (8000d88 <putchar_fg_a+0x520>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <putchar_fg_a+0x464>
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc84 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][1] & k)) copyForegroundPixel(j+1);
 8000ccc:	79ba      	ldrb	r2, [r7, #6]
 8000cce:	492e      	ldr	r1, [pc, #184]	; (8000d88 <putchar_fg_a+0x520>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3301      	adds	r3, #1
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d004      	beq.n	8000cf0 <putchar_fg_a+0x488>
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc72 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][2] & k)) copyForegroundPixel(j+2);
 8000cf0:	79ba      	ldrb	r2, [r7, #6]
 8000cf2:	4925      	ldr	r1, [pc, #148]	; (8000d88 <putchar_fg_a+0x520>)
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4013      	ands	r3, r2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d004      	beq.n	8000d14 <putchar_fg_a+0x4ac>
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fc60 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][3] & k)) copyForegroundPixel(j+3);
 8000d14:	79ba      	ldrb	r2, [r7, #6]
 8000d16:	491c      	ldr	r1, [pc, #112]	; (8000d88 <putchar_fg_a+0x520>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	3303      	adds	r3, #3
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	4013      	ands	r3, r2
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <putchar_fg_a+0x4d0>
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	3303      	adds	r3, #3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fc4e 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][4] & k)) copyForegroundPixel(j+4);
 8000d38:	79ba      	ldrb	r2, [r7, #6]
 8000d3a:	4913      	ldr	r1, [pc, #76]	; (8000d88 <putchar_fg_a+0x520>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	3304      	adds	r3, #4
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <putchar_fg_a+0x4f4>
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	3304      	adds	r3, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fc3c 	bl	80005d4 <copyForegroundPixel>
		for(i=0;i<7;i++){ // row loop
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	d991      	bls.n	8000c8c <putchar_fg_a+0x424>
		current_position += 6;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <putchar_fg_a+0x518>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3306      	adds	r3, #6
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <putchar_fg_a+0x518>)
 8000d70:	6013      	str	r3, [r2, #0]
}
 8000d72:	e07e      	b.n	8000e72 <putchar_fg_a+0x60a>
	} else if(f_size == FIVE_BY_EIGHT){
 8000d74:	797b      	ldrb	r3, [r7, #5]
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d17b      	bne.n	8000e72 <putchar_fg_a+0x60a>
		for(i=0;i<7;i++){ // row loop
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e070      	b.n	8000e62 <putchar_fg_a+0x5fa>
 8000d80:	2000265c 	.word	0x2000265c
 8000d84:	08007ce8 	.word	0x08007ce8
 8000d88:	08007e74 	.word	0x08007e74
			j = OFFSET + current_position + (i * NUM_COLUMN);
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <putchar_fg_a+0x614>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3301      	adds	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
			k = (0x1 << i);
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	73fb      	strb	r3, [r7, #15]
			if((charmap_five_by_seven[c][0] & k)) copyForegroundPixel(j);
 8000dac:	79ba      	ldrb	r2, [r7, #6]
 8000dae:	4934      	ldr	r1, [pc, #208]	; (8000e80 <putchar_fg_a+0x618>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <putchar_fg_a+0x564>
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc04 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][1] & k)) copyForegroundPixel(j+1);
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	492c      	ldr	r1, [pc, #176]	; (8000e80 <putchar_fg_a+0x618>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3301      	adds	r3, #1
 8000dda:	781a      	ldrb	r2, [r3, #0]
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4013      	ands	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <putchar_fg_a+0x588>
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fbf2 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][2] & k)) copyForegroundPixel(j+2);
 8000df0:	79ba      	ldrb	r2, [r7, #6]
 8000df2:	4923      	ldr	r1, [pc, #140]	; (8000e80 <putchar_fg_a+0x618>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	4013      	ands	r3, r2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d004      	beq.n	8000e14 <putchar_fg_a+0x5ac>
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fbe0 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][3] & k)) copyForegroundPixel(j+3);
 8000e14:	79ba      	ldrb	r2, [r7, #6]
 8000e16:	491a      	ldr	r1, [pc, #104]	; (8000e80 <putchar_fg_a+0x618>)
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	3303      	adds	r3, #3
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	4013      	ands	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d004      	beq.n	8000e38 <putchar_fg_a+0x5d0>
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	3303      	adds	r3, #3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fbce 	bl	80005d4 <copyForegroundPixel>
			if((charmap_five_by_seven[c][4] & k)) copyForegroundPixel(j+4);
 8000e38:	79ba      	ldrb	r2, [r7, #6]
 8000e3a:	4911      	ldr	r1, [pc, #68]	; (8000e80 <putchar_fg_a+0x618>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	3304      	adds	r3, #4
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <putchar_fg_a+0x5f4>
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	3304      	adds	r3, #4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fbbc 	bl	80005d4 <copyForegroundPixel>
		for(i=0;i<7;i++){ // row loop
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d991      	bls.n	8000d8c <putchar_fg_a+0x524>
		current_position += 6;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <putchar_fg_a+0x614>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3306      	adds	r3, #6
 8000e6e:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <putchar_fg_a+0x614>)
 8000e70:	6013      	str	r3, [r2, #0]
}
 8000e72:	bf00      	nop
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000265c 	.word	0x2000265c
 8000e80:	08007e74 	.word	0x08007e74

08000e84 <putcolon>:

void putcolon(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	uint16_t i,j;

	if(flag_colon_display){
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <putcolon+0x70>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d027      	beq.n	8000ee2 <putcolon+0x5e>
		for(i=0;i<7;i++){ // row loop
 8000e92:	2300      	movs	r3, #0
 8000e94:	80fb      	strh	r3, [r7, #6]
 8000e96:	e021      	b.n	8000edc <putcolon+0x58>
			j = OFFSET + current_position + (i * NUM_COLUMN);
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <putcolon+0x74>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	80bb      	strh	r3, [r7, #4]

			//if(i == 1) setPixel(j,0xA0,0x10,0x10);
			if(i == 2) setPixel(j,0xA0,0x10,0x10);
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d105      	bne.n	8000ec4 <putcolon+0x40>
 8000eb8:	88b8      	ldrh	r0, [r7, #4]
 8000eba:	2310      	movs	r3, #16
 8000ebc:	2210      	movs	r2, #16
 8000ebe:	21a0      	movs	r1, #160	; 0xa0
 8000ec0:	f7ff fa10 	bl	80002e4 <setPixel>
			//if(i == 4) setPixel(j,0xA0,0x10,0x10);
			//if(i == 5) setPixel(j,0xA0,0x10,0x10);
			//if(i == 1) setPixel(j+1,0xA0,0x10,0x10);
			//if(i == 2) setPixel(j+1,0xA0,0x10,0x10);
			if(i == 4) setPixel(j,0xA0,0x10,0x10);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d105      	bne.n	8000ed6 <putcolon+0x52>
 8000eca:	88b8      	ldrh	r0, [r7, #4]
 8000ecc:	2310      	movs	r3, #16
 8000ece:	2210      	movs	r2, #16
 8000ed0:	21a0      	movs	r1, #160	; 0xa0
 8000ed2:	f7ff fa07 	bl	80002e4 <setPixel>
		for(i=0;i<7;i++){ // row loop
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	80fb      	strh	r3, [r7, #6]
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d9da      	bls.n	8000e98 <putcolon+0x14>
			//if(i == 5) setPixel(j+1,0xA0,0x10,0x10);
		}
	}

	current_position += 2;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <putcolon+0x74>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <putcolon+0x74>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20002662 	.word	0x20002662
 8000ef8:	2000265c 	.word	0x2000265c

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f00:	f000 fd9e 	bl	8001a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f04:	f000 f846 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f000 f97c 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0c:	f000 f94c 	bl	80011a8 <MX_DMA_Init>
  MX_RTC_Init();
 8000f10:	f000 f8cc 	bl	80010ac <MX_RTC_Init>
  MX_SPI1_Init();
 8000f14:	f000 f8e8 	bl	80010e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f18:	f000 f91c 	bl	8001154 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000f1c:	f000 f898 	bl	8001050 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE); // enable UART IDLE interrupt
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <main+0x74>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <main+0x74>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0210 	orr.w	r2, r2, #16
 8000f2e:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(&huart1,uart_rx_data, RX_DATA_SIZE);
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	4910      	ldr	r1, [pc, #64]	; (8000f74 <main+0x78>)
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <main+0x74>)
 8000f36:	f003 fa3b 	bl	80043b0 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f3a:	f003 fe61 	bl	8004c00 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  uart1Event = osEventFlagsNew(NULL);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f003 ff9c 	bl	8004e7c <osEventFlagsNew>
 8000f44:	4602      	mov	r2, r0
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <main+0x7c>)
 8000f48:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <main+0x80>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <main+0x84>)
 8000f50:	f003 febc 	bl	8004ccc <osThreadNew>
 8000f54:	4602      	mov	r2, r0
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <main+0x88>)
 8000f58:	601a      	str	r2, [r3, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <main+0x8c>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <main+0x90>)
 8000f60:	f003 feb4 	bl	8004ccc <osThreadNew>
 8000f64:	4602      	mov	r2, r0
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <main+0x94>)
 8000f68:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f6a:	f003 fe7b 	bl	8004c64 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <main+0x72>
 8000f70:	20002608 	.word	0x20002608
 8000f74:	2000002c 	.word	0x2000002c
 8000f78:	20001f78 	.word	0x20001f78
 8000f7c:	08007748 	.word	0x08007748
 8000f80:	080012b5 	.word	0x080012b5
 8000f84:	200019c4 	.word	0x200019c4
 8000f88:	0800776c 	.word	0x0800776c
 8000f8c:	08001335 	.word	0x08001335
 8000f90:	20002604 	.word	0x20002604

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9e:	2228      	movs	r2, #40	; 0x28
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 fb91 	bl	80076ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000fe4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fb4e 	bl	8002690 <HAL_RCC_OscConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ffa:	f000 fa47 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2101      	movs	r1, #1
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fdb8 	bl	8002b90 <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001026:	f000 fa31 	bl	800148c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f001 ff76 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001042:	f000 fa23 	bl	800148c <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	; 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <MX_I2C2_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_I2C2_Init+0x50>)
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_I2C2_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_I2C2_Init+0x50>)
 800106e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001072:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_I2C2_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_I2C2_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_I2C2_Init+0x50>)
 800108e:	f001 f9cb 	bl	8002428 <HAL_I2C_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001098:	f000 f9f8 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20001f7c 	.word	0x20001f7c
 80010a4:	40005800 	.word	0x40005800
 80010a8:	000186a0 	.word	0x000186a0

080010ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_RTC_Init+0x34>)
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <MX_RTC_Init+0x38>)
 80010b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_RTC_Init+0x34>)
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_RTC_Init+0x34>)
 80010c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_RTC_Init+0x34>)
 80010c8:	f002 f8a0 	bl	800320c <HAL_RTC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80010d2:	f000 f9db 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_SetSecond_IT(&hrtc); // second interrupt
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <MX_RTC_Init+0x34>)
 80010d8:	f002 fc8a 	bl	80039f0 <HAL_RTCEx_SetSecond_IT>
  /* USER CODE END RTC_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20002648 	.word	0x20002648
 80010e4:	40002800 	.word	0x40002800

080010e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_SPI1_Init+0x64>)
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_SPI1_Init+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_SPI1_Init+0x64>)
 80010f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_SPI1_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_SPI1_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_SPI1_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_SPI1_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_SPI1_Init+0x64>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_SPI1_Init+0x64>)
 800111c:	2218      	movs	r2, #24
 800111e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_SPI1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_SPI1_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_SPI1_Init+0x64>)
 8001134:	220a      	movs	r2, #10
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_SPI1_Init+0x64>)
 800113a:	f002 fcbf 	bl	8003abc <HAL_SPI_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001144:	f000 f9a2 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20002664 	.word	0x20002664
 8001150:	40013000 	.word	0x40013000

08001154 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART1_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800118c:	f003 f8c2 	bl	8004314 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f979 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20002608 	.word	0x20002608
 80011a4:	40013800 	.word	0x40013800

080011a8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_DMA_Init+0x58>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_DMA_Init+0x58>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_DMA_Init+0x58>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	200d      	movs	r0, #13
 80011cc:	f000 fd1f 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011d0:	200d      	movs	r0, #13
 80011d2:	f000 fd38 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2105      	movs	r1, #5
 80011da:	200e      	movs	r0, #14
 80011dc:	f000 fd17 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011e0:	200e      	movs	r0, #14
 80011e2:	f000 fd30 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2105      	movs	r1, #5
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 fd0f 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011f0:	200f      	movs	r0, #15
 80011f2:	f000 fd28 	bl	8001c46 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_GPIO_Init+0xa8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_GPIO_Init+0xa8>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_GPIO_Init+0xa8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_GPIO_Init+0xa8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_GPIO_Init+0xa8>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_GPIO_Init+0xa8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_GPIO_Init+0xac>)
 8001280:	f001 f8ba 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8001284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_GPIO_Init+0xac>)
 800129e:	f000 ff51 	bl	8002144 <HAL_GPIO_Init>

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40011000 	.word	0x40011000

080012b4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    //osDelay(1);
	  //osEventFlagsWait(uart1Event,0x01,osFlagsWaitAny,osWaitForever);
	  //handle_rx(&huart1);
	  osDelay(90);
 80012bc:	205a      	movs	r0, #90	; 0x5a
 80012be:	f003 fdaf 	bl	8004e20 <osDelay>
	  if(r_offset_dig_0) r_offset_dig_0--;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <StartDefaultTask+0x70>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <StartDefaultTask+0x26>
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <StartDefaultTask+0x70>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3b01      	subs	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <StartDefaultTask+0x70>)
 80012d8:	701a      	strb	r2, [r3, #0]
	  if(r_offset_dig_1) r_offset_dig_1--;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <StartDefaultTask+0x74>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <StartDefaultTask+0x3e>
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <StartDefaultTask+0x74>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <StartDefaultTask+0x74>)
 80012f0:	701a      	strb	r2, [r3, #0]
	  if(r_offset_dig_2) r_offset_dig_2--;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <StartDefaultTask+0x78>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <StartDefaultTask+0x56>
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <StartDefaultTask+0x78>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <StartDefaultTask+0x78>)
 8001308:	701a      	strb	r2, [r3, #0]
	  if(r_offset_dig_3) r_offset_dig_3--;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <StartDefaultTask+0x7c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0d3      	beq.n	80012bc <StartDefaultTask+0x8>
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <StartDefaultTask+0x7c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <StartDefaultTask+0x7c>)
 8001320:	701a      	strb	r2, [r3, #0]
	  osDelay(90);
 8001322:	e7cb      	b.n	80012bc <StartDefaultTask+0x8>
 8001324:	20002660 	.word	0x20002660
 8001328:	20002700 	.word	0x20002700
 800132c:	2000257a 	.word	0x2000257a
 8001330:	20002661 	.word	0x20002661

08001334 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
	uint8_t temp_num,temp_num_prev_0,temp_num_prev_1,temp_num_prev_2,temp_num_prev_3,prev_dig_0, prev_dig_1,prev_dig_2,prev_dig_3;
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5); //5minimum
 800133c:	2005      	movs	r0, #5
 800133e:	f003 fd6f 	bl	8004e20 <osDelay>
	  HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8001342:	2201      	movs	r2, #1
 8001344:	4942      	ldr	r1, [pc, #264]	; (8001450 <StartLedTask+0x11c>)
 8001346:	4843      	ldr	r0, [pc, #268]	; (8001454 <StartLedTask+0x120>)
 8001348:	f001 fff6 	bl	8003338 <HAL_RTC_GetTime>

	  setAll(0x00,0x00,0x00);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff f8bf 	bl	80004d4 <setAll>
	  //RGBLoop_foreground();
	  rainbowCycle_foreground();
 8001356:	f7ff f9d7 	bl	8000708 <rainbowCycle_foreground>
	  home();
 800135a:	f7ff fa79 	bl	8000850 <home>

	  //temp_num = 0;
	  temp_num = '0' + (0x0f & (cTime.Hours >> 4));
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <StartLedTask+0x11c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3330      	adds	r3, #48	; 0x30
 8001368:	73fb      	strb	r3, [r7, #15]
	  //putchar_fg('1',THREE_BY_SEVEN);

	  if(prev_dig_3 != temp_num){
 800136a:	7c3a      	ldrb	r2, [r7, #16]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	429a      	cmp	r2, r3
 8001370:	d006      	beq.n	8001380 <StartLedTask+0x4c>
		  r_offset_dig_3 = 7;
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <StartLedTask+0x124>)
 8001374:	2207      	movs	r2, #7
 8001376:	701a      	strb	r2, [r3, #0]
		  temp_num_prev_3 = prev_dig_3;
 8001378:	7c3b      	ldrb	r3, [r7, #16]
 800137a:	753b      	strb	r3, [r7, #20]
		  prev_dig_3 = temp_num;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	743b      	strb	r3, [r7, #16]
	  }

	  if(temp_num == '0'){
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b30      	cmp	r3, #48	; 0x30
 8001384:	d10a      	bne.n	800139c <StartLedTask+0x68>
		  //print space in case of 0
		  temp_num = ' ';
 8001386:	2320      	movs	r3, #32
 8001388:	73fb      	strb	r3, [r7, #15]
		  putchar_fg_a(temp_num_prev_3,temp_num,THREE_BY_SEVEN,r_offset_dig_3);
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <StartLedTask+0x124>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	7bf9      	ldrb	r1, [r7, #15]
 8001392:	7d38      	ldrb	r0, [r7, #20]
 8001394:	2201      	movs	r2, #1
 8001396:	f7ff fa67 	bl	8000868 <putchar_fg_a>
 800139a:	e007      	b.n	80013ac <StartLedTask+0x78>
	  } else {
		  putchar_fg_a(temp_num_prev_3,temp_num,THREE_BY_SEVEN,r_offset_dig_3);
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <StartLedTask+0x124>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	7bf9      	ldrb	r1, [r7, #15]
 80013a4:	7d38      	ldrb	r0, [r7, #20]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f7ff fa5e 	bl	8000868 <putchar_fg_a>
	  }


	  temp_num = '0' + (0x0f & cTime.Hours);
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <StartLedTask+0x11c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3330      	adds	r3, #48	; 0x30
 80013b8:	73fb      	strb	r3, [r7, #15]

	  if(prev_dig_2 != temp_num){
 80013ba:	7c7a      	ldrb	r2, [r7, #17]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d006      	beq.n	80013d0 <StartLedTask+0x9c>
		  r_offset_dig_2 = 7;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <StartLedTask+0x128>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	701a      	strb	r2, [r3, #0]
		  temp_num_prev_2 = prev_dig_2;
 80013c8:	7c7b      	ldrb	r3, [r7, #17]
 80013ca:	757b      	strb	r3, [r7, #21]
		  prev_dig_2 = temp_num;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	747b      	strb	r3, [r7, #17]
	  }

	  putchar_fg_a(temp_num_prev_2,temp_num,FOUR_BY_SEVEN,r_offset_dig_2);
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <StartLedTask+0x128>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	7bf9      	ldrb	r1, [r7, #15]
 80013d8:	7d78      	ldrb	r0, [r7, #21]
 80013da:	2202      	movs	r2, #2
 80013dc:	f7ff fa44 	bl	8000868 <putchar_fg_a>

	  putcolon(); //colon
 80013e0:	f7ff fd50 	bl	8000e84 <putcolon>

	  temp_num = '0' + (0x0f & (cTime.Seconds >> 4));
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <StartLedTask+0x11c>)
 80013e6:	789b      	ldrb	r3, [r3, #2]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	3330      	adds	r3, #48	; 0x30
 80013ee:	73fb      	strb	r3, [r7, #15]

	  if(prev_dig_1 != temp_num){
 80013f0:	7cba      	ldrb	r2, [r7, #18]
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d006      	beq.n	8001406 <StartLedTask+0xd2>
		  r_offset_dig_1 = 7;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <StartLedTask+0x12c>)
 80013fa:	2207      	movs	r2, #7
 80013fc:	701a      	strb	r2, [r3, #0]
		  temp_num_prev_1 = prev_dig_1;
 80013fe:	7cbb      	ldrb	r3, [r7, #18]
 8001400:	75bb      	strb	r3, [r7, #22]
		  prev_dig_1 = temp_num;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	74bb      	strb	r3, [r7, #18]

	  }

	  putchar_fg_a(temp_num_prev_1,temp_num,FOUR_BY_SEVEN,r_offset_dig_1);
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <StartLedTask+0x12c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	7bf9      	ldrb	r1, [r7, #15]
 800140e:	7db8      	ldrb	r0, [r7, #22]
 8001410:	2202      	movs	r2, #2
 8001412:	f7ff fa29 	bl	8000868 <putchar_fg_a>

	  temp_num = '0' + (0x0f & cTime.Seconds); // convert to ascii num
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <StartLedTask+0x11c>)
 8001418:	789b      	ldrb	r3, [r3, #2]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	b2db      	uxtb	r3, r3
 8001420:	3330      	adds	r3, #48	; 0x30
 8001422:	73fb      	strb	r3, [r7, #15]

	  if(prev_dig_0 != temp_num){
 8001424:	7cfa      	ldrb	r2, [r7, #19]
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	429a      	cmp	r2, r3
 800142a:	d006      	beq.n	800143a <StartLedTask+0x106>
		  r_offset_dig_0 = 7;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <StartLedTask+0x130>)
 800142e:	2207      	movs	r2, #7
 8001430:	701a      	strb	r2, [r3, #0]
		  temp_num_prev_0 = prev_dig_0;
 8001432:	7cfb      	ldrb	r3, [r7, #19]
 8001434:	75fb      	strb	r3, [r7, #23]
		  prev_dig_0 = temp_num;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	74fb      	strb	r3, [r7, #19]

	  }

	  putchar_fg_a(temp_num_prev_0,temp_num,FOUR_BY_SEVEN,r_offset_dig_0);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <StartLedTask+0x130>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	7bf9      	ldrb	r1, [r7, #15]
 8001442:	7df8      	ldrb	r0, [r7, #23]
 8001444:	2202      	movs	r2, #2
 8001446:	f7ff fa0f 	bl	8000868 <putchar_fg_a>
	  putchar_m('1',THREE_BY_FIVE,Wheel);
	  putchar_m('A',THREE_BY_FIVE,Wheel);
	  putchar_m('U',THREE_BY_FIVE,Wheel);
	  putchar_m('G',THREE_BY_FIVE,Wheel);
*/
	  showStrip();
 800144a:	f7ff f93f 	bl	80006cc <showStrip>
	  osDelay(5); //5minimum
 800144e:	e775      	b.n	800133c <StartLedTask+0x8>
 8001450:	20001f74 	.word	0x20001f74
 8001454:	20002648 	.word	0x20002648
 8001458:	20002661 	.word	0x20002661
 800145c:	2000257a 	.word	0x2000257a
 8001460:	20002700 	.word	0x20002700
 8001464:	20002660 	.word	0x20002660

08001468 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800147a:	f000 faf7 	bl	8001a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40000800 	.word	0x40000800

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_MspInit+0x68>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_MspInit+0x68>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_MspInit+0x68>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_MspInit+0x68>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_MspInit+0x68>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_MspInit+0x68>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	210f      	movs	r1, #15
 80014d2:	f06f 0001 	mvn.w	r0, #1
 80014d6:	f000 fb9a 	bl	8001c0e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_MspInit+0x6c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_MspInit+0x6c>)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000

08001508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_I2C_MspInit+0x74>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d124      	bne.n	8001572 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_I2C_MspInit+0x78>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_I2C_MspInit+0x78>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_I2C_MspInit+0x78>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001540:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001546:	2312      	movs	r3, #18
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <HAL_I2C_MspInit+0x7c>)
 8001556:	f000 fdf5 	bl	8002144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_I2C_MspInit+0x78>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_I2C_MspInit+0x78>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_I2C_MspInit+0x78>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005800 	.word	0x40005800
 8001580:	40021000 	.word	0x40021000
 8001584:	40010c00 	.word	0x40010c00

08001588 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_RTC_MspInit+0x4c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d118      	bne.n	80015cc <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800159a:	f001 f86d 	bl	8002678 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_RTC_MspInit+0x50>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_RTC_MspInit+0x50>)
 80015a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RTC_MspInit+0x50>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RTC_MspInit+0x54>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2105      	movs	r1, #5
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 fb24 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f000 fb3d 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40002800 	.word	0x40002800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	4242043c 	.word	0x4242043c

080015e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a28      	ldr	r2, [pc, #160]	; (800169c <HAL_SPI_MspInit+0xbc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d149      	bne.n	8001694 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_SPI_MspInit+0xc0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <HAL_SPI_MspInit+0xc0>)
 8001606:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_SPI_MspInit+0xc0>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_SPI_MspInit+0xc0>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_SPI_MspInit+0xc0>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_SPI_MspInit+0xc0>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001630:	23a0      	movs	r3, #160	; 0xa0
 8001632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	4818      	ldr	r0, [pc, #96]	; (80016a4 <HAL_SPI_MspInit+0xc4>)
 8001644:	f000 fd7e 	bl	8002144 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 800164a:	4a18      	ldr	r2, [pc, #96]	; (80016ac <HAL_SPI_MspInit+0xcc>)
 800164c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001650:	2210      	movs	r2, #16
 8001652:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001678:	480b      	ldr	r0, [pc, #44]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 800167a:	f000 faf3 	bl	8001c64 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8001684:	f7ff ff02 	bl	800148c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 800168c:	649a      	str	r2, [r3, #72]	; 0x48
 800168e:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_SPI_MspInit+0xc8>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40013000 	.word	0x40013000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	200026bc 	.word	0x200026bc
 80016ac:	40020030 	.word	0x40020030

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_UART_MspInit+0x138>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	f040 8086 	bne.w	80017de <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d2:	4b46      	ldr	r3, [pc, #280]	; (80017ec <HAL_UART_MspInit+0x13c>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a45      	ldr	r2, [pc, #276]	; (80017ec <HAL_UART_MspInit+0x13c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_UART_MspInit+0x13c>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b40      	ldr	r3, [pc, #256]	; (80017ec <HAL_UART_MspInit+0x13c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <HAL_UART_MspInit+0x13c>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_UART_MspInit+0x13c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	4836      	ldr	r0, [pc, #216]	; (80017f0 <HAL_UART_MspInit+0x140>)
 8001718:	f000 fd14 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800171c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	482f      	ldr	r0, [pc, #188]	; (80017f0 <HAL_UART_MspInit+0x140>)
 8001732:	f000 fd07 	bl	8002144 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_UART_MspInit+0x144>)
 8001738:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <HAL_UART_MspInit+0x148>)
 800173a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_UART_MspInit+0x144>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HAL_UART_MspInit+0x144>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_UART_MspInit+0x144>)
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_UART_MspInit+0x144>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_UART_MspInit+0x144>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_UART_MspInit+0x144>)
 800175c:	2220      	movs	r2, #32
 800175e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_UART_MspInit+0x144>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <HAL_UART_MspInit+0x144>)
 8001768:	f000 fa7c 	bl	8001c64 <HAL_DMA_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001772:	f7ff fe8b 	bl	800148c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_UART_MspInit+0x144>)
 800177a:	635a      	str	r2, [r3, #52]	; 0x34
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_UART_MspInit+0x144>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HAL_UART_MspInit+0x14c>)
 8001784:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_UART_MspInit+0x150>)
 8001786:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_UART_MspInit+0x14c>)
 800178a:	2210      	movs	r2, #16
 800178c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_UART_MspInit+0x14c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_UART_MspInit+0x14c>)
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0x14c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_UART_MspInit+0x14c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_UART_MspInit+0x14c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_UART_MspInit+0x14c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <HAL_UART_MspInit+0x14c>)
 80017b4:	f000 fa56 	bl	8001c64 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80017be:	f7ff fe65 	bl	800148c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_UART_MspInit+0x14c>)
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <HAL_UART_MspInit+0x14c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2025      	movs	r0, #37	; 0x25
 80017d4:	f000 fa1b 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017d8:	2025      	movs	r0, #37	; 0x25
 80017da:	f000 fa34 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	200025c0 	.word	0x200025c0
 80017f8:	40020058 	.word	0x40020058
 80017fc:	2000257c 	.word	0x2000257c
 8001800:	40020044 	.word	0x40020044

08001804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	201e      	movs	r0, #30
 800181a:	f000 f9f8 	bl	8001c0e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800181e:	201e      	movs	r0, #30
 8001820:	f000 fa11 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_InitTick+0xa0>)
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_InitTick+0xa0>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	61d3      	str	r3, [r2, #28]
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_InitTick+0xa0>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800183c:	f107 0210 	add.w	r2, r7, #16
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fb20 	bl	8002e8c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800184c:	f001 faf6 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8001850:	4603      	mov	r3, r0
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <HAL_InitTick+0xa4>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	3b01      	subs	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_InitTick+0xa8>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_InitTick+0xac>)
 8001868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_InitTick+0xa8>)
 800186c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001870:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_InitTick+0xa8>)
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_InitTick+0xa8>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_InitTick+0xa8>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_InitTick+0xa8>)
 8001886:	f002 fb4d 	bl	8003f24 <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001890:	4806      	ldr	r0, [pc, #24]	; (80018ac <HAL_InitTick+0xa8>)
 8001892:	f002 fb7b 	bl	8003f8c <HAL_TIM_Base_Start_IT>
 8001896:	4603      	mov	r3, r0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3730      	adds	r7, #48	; 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	20002704 	.word	0x20002704
 80018b0:	40000800 	.word	0x40000800

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <HardFault_Handler+0x4>

080018c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <MemManage_Handler+0x4>

080018cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <BusFault_Handler+0x4>

080018d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <UsageFault_Handler+0x4>

080018d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <RTC_IRQHandler+0x10>)
 80018ea:	f002 f8aa 	bl	8003a42 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20002648 	.word	0x20002648

080018f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <DMA1_Channel3_IRQHandler+0x10>)
 80018fe:	f000 fae1 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200026bc 	.word	0x200026bc

0800190c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Channel4_IRQHandler+0x10>)
 8001912:	f000 fad7 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000257c 	.word	0x2000257c

08001920 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Channel5_IRQHandler+0x10>)
 8001926:	f000 facd 	bl	8001ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200025c0 	.word	0x200025c0

08001934 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <TIM4_IRQHandler+0x10>)
 800193a:	f002 fb4a 	bl	8003fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20002704 	.word	0x20002704

08001948 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800194e:	480e      	ldr	r0, [pc, #56]	; (8001988 <USART1_IRQHandler+0x40>)
 8001950:	f002 fdae 	bl	80044b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) == SET) {
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <USART1_IRQHandler+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b10      	cmp	r3, #16
 8001960:	d10d      	bne.n	800197e <USART1_IRQHandler+0x36>
  	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <USART1_IRQHandler+0x40>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <USART1_IRQHandler+0x40>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
  	  handle_rx(&huart1);
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <USART1_IRQHandler+0x40>)
 800197a:	f7fe fc49 	bl	8000210 <handle_rx>
    }

  /* USER CODE END USART1_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20002608 	.word	0x20002608

0800198c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <SystemInit+0x5c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <SystemInit+0x5c>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <SystemInit+0x5c>)
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4911      	ldr	r1, [pc, #68]	; (80019e8 <SystemInit+0x5c>)
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SystemInit+0x60>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <SystemInit+0x5c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <SystemInit+0x5c>)
 80019ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <SystemInit+0x5c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SystemInit+0x5c>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SystemInit+0x5c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <SystemInit+0x5c>)
 80019ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SystemInit+0x5c>)
 80019d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SystemInit+0x64>)
 80019da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019de:	609a      	str	r2, [r3, #8]
#endif 
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	f8ff0000 	.word	0xf8ff0000
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019f6:	e003      	b.n	8001a00 <LoopCopyDataInit>

080019f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019fe:	3104      	adds	r1, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a00:	480a      	ldr	r0, [pc, #40]	; (8001a2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a08:	d3f6      	bcc.n	80019f8 <CopyDataInit>
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a0c:	e002      	b.n	8001a14 <LoopFillZerobss>

08001a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a10:	f842 3b04 	str.w	r3, [r2], #4

08001a14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a18:	d3f9      	bcc.n	8001a0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1a:	f7ff ffb7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f005 fe25 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a22:	f7ff fa6b 	bl	8000efc <main>
  bx lr
 8001a26:	4770      	bx	lr
  ldr r3, =_sidata
 8001a28:	08008084 	.word	0x08008084
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a30:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001a34:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001a38:	20002788 	.word	0x20002788

08001a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC1_2_IRQHandler>
	...

08001a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x28>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x28>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f8d1 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fed4 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fd1c 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000

08001a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_IncTick+0x1c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_IncTick+0x20>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <HAL_IncTick+0x20>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20002744 	.word	0x20002744

08001a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <HAL_GetTick+0x10>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	20002744 	.word	0x20002744

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4906      	ldr	r1, [pc, #24]	; (8001b3c <__NVIC_EnableIRQ+0x34>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	; (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	; (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff4f 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff64 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ffb2 	bl	8001b94 <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff81 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff57 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e043      	b.n	8001d02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_DMA_Init+0xa8>)
 8001c82:	4413      	add	r3, r2
 8001c84:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_DMA_Init+0xac>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	009a      	lsls	r2, r3, #2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_DMA_Init+0xb0>)
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	bffdfff8 	.word	0xbffdfff8
 8001d10:	cccccccd 	.word	0xcccccccd
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_DMA_Start_IT+0x20>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e04a      	b.n	8001dce <HAL_DMA_Start_IT+0xb6>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d13a      	bne.n	8001dc0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f9ba 	bl	80020e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 020e 	orr.w	r2, r2, #14
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e00f      	b.n	8001dae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0204 	bic.w	r2, r2, #4
 8001d9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 020a 	orr.w	r2, r2, #10
 8001dac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e005      	b.n	8001dcc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d005      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2204      	movs	r2, #4
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e051      	b.n	8001e9e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 020e 	bic.w	r2, r2, #14
 8001e08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_DMA_Abort_IT+0xd0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d029      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xa0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <HAL_DMA_Abort_IT+0xd4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d022      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x9c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_DMA_Abort_IT+0xd8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d01a      	beq.n	8001e6e <HAL_DMA_Abort_IT+0x96>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <HAL_DMA_Abort_IT+0xdc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d012      	beq.n	8001e68 <HAL_DMA_Abort_IT+0x90>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_DMA_Abort_IT+0xe0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00a      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x8a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_DMA_Abort_IT+0xe4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d102      	bne.n	8001e5c <HAL_DMA_Abort_IT+0x84>
 8001e56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e5a:	e00e      	b.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e60:	e00b      	b.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e66:	e008      	b.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6c:	e005      	b.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e72:	e002      	b.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e74:	2310      	movs	r3, #16
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_Abort_IT+0xa2>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_DMA_Abort_IT+0xe8>)
 8001e7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
    } 
  }
  return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020008 	.word	0x40020008
 8001eac:	4002001c 	.word	0x4002001c
 8001eb0:	40020030 	.word	0x40020030
 8001eb4:	40020044 	.word	0x40020044
 8001eb8:	40020058 	.word	0x40020058
 8001ebc:	4002006c 	.word	0x4002006c
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d04f      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xc8>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d04a      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0204 	bic.w	r2, r2, #4
 8001f12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d029      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xae>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d022      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xaa>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a63      	ldr	r2, [pc, #396]	; (80020bc <HAL_DMA_IRQHandler+0x1f8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01a      	beq.n	8001f68 <HAL_DMA_IRQHandler+0xa4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a62      	ldr	r2, [pc, #392]	; (80020c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d012      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x9e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <HAL_DMA_IRQHandler+0x200>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00a      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x98>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a5f      	ldr	r2, [pc, #380]	; (80020c8 <HAL_DMA_IRQHandler+0x204>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d102      	bne.n	8001f56 <HAL_DMA_IRQHandler+0x92>
 8001f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f54:	e00e      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f5a:	e00b      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f60:	e008      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f66:	e005      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6c:	e002      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f6e:	2340      	movs	r3, #64	; 0x40
 8001f70:	e000      	b.n	8001f74 <HAL_DMA_IRQHandler+0xb0>
 8001f72:	2304      	movs	r3, #4
 8001f74:	4a55      	ldr	r2, [pc, #340]	; (80020cc <HAL_DMA_IRQHandler+0x208>)
 8001f76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8094 	beq.w	80020aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f8a:	e08e      	b.n	80020aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2202      	movs	r2, #2
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d056      	beq.n	800204a <HAL_DMA_IRQHandler+0x186>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d051      	beq.n	800204a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020a 	bic.w	r2, r2, #10
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <HAL_DMA_IRQHandler+0x1f0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d029      	beq.n	800202a <HAL_DMA_IRQHandler+0x166>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a37      	ldr	r2, [pc, #220]	; (80020b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_IRQHandler+0x162>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a35      	ldr	r2, [pc, #212]	; (80020bc <HAL_DMA_IRQHandler+0x1f8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01a      	beq.n	8002020 <HAL_DMA_IRQHandler+0x15c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d012      	beq.n	800201a <HAL_DMA_IRQHandler+0x156>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a32      	ldr	r2, [pc, #200]	; (80020c4 <HAL_DMA_IRQHandler+0x200>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00a      	beq.n	8002014 <HAL_DMA_IRQHandler+0x150>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <HAL_DMA_IRQHandler+0x204>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d102      	bne.n	800200e <HAL_DMA_IRQHandler+0x14a>
 8002008:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800200c:	e00e      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 800200e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002012:	e00b      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	e008      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 800201a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201e:	e005      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 8002020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002024:	e002      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 8002026:	2320      	movs	r3, #32
 8002028:	e000      	b.n	800202c <HAL_DMA_IRQHandler+0x168>
 800202a:	2302      	movs	r3, #2
 800202c:	4a27      	ldr	r2, [pc, #156]	; (80020cc <HAL_DMA_IRQHandler+0x208>)
 800202e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d034      	beq.n	80020aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002048:	e02f      	b.n	80020aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2208      	movs	r2, #8
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d028      	beq.n	80020ac <HAL_DMA_IRQHandler+0x1e8>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 020e 	bic.w	r2, r2, #14
 8002072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
    }
  }
  return;
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
}
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40020008 	.word	0x40020008
 80020b8:	4002001c 	.word	0x4002001c
 80020bc:	40020030 	.word	0x40020030
 80020c0:	40020044 	.word	0x40020044
 80020c4:	40020058 	.word	0x40020058
 80020c8:	4002006c 	.word	0x4002006c
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b10      	cmp	r3, #16
 8002114:	d108      	bne.n	8002128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002126:	e007      	b.n	8002138 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b08b      	sub	sp, #44	; 0x2c
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002156:	e127      	b.n	80023a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002158:	2201      	movs	r2, #1
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 8116 	bne.w	80023a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b12      	cmp	r3, #18
 800217c:	d034      	beq.n	80021e8 <HAL_GPIO_Init+0xa4>
 800217e:	2b12      	cmp	r3, #18
 8002180:	d80d      	bhi.n	800219e <HAL_GPIO_Init+0x5a>
 8002182:	2b02      	cmp	r3, #2
 8002184:	d02b      	beq.n	80021de <HAL_GPIO_Init+0x9a>
 8002186:	2b02      	cmp	r3, #2
 8002188:	d804      	bhi.n	8002194 <HAL_GPIO_Init+0x50>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d031      	beq.n	80021f2 <HAL_GPIO_Init+0xae>
 800218e:	2b01      	cmp	r3, #1
 8002190:	d01c      	beq.n	80021cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002192:	e048      	b.n	8002226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002194:	2b03      	cmp	r3, #3
 8002196:	d043      	beq.n	8002220 <HAL_GPIO_Init+0xdc>
 8002198:	2b11      	cmp	r3, #17
 800219a:	d01b      	beq.n	80021d4 <HAL_GPIO_Init+0x90>
          break;
 800219c:	e043      	b.n	8002226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800219e:	4a89      	ldr	r2, [pc, #548]	; (80023c4 <HAL_GPIO_Init+0x280>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d026      	beq.n	80021f2 <HAL_GPIO_Init+0xae>
 80021a4:	4a87      	ldr	r2, [pc, #540]	; (80023c4 <HAL_GPIO_Init+0x280>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d806      	bhi.n	80021b8 <HAL_GPIO_Init+0x74>
 80021aa:	4a87      	ldr	r2, [pc, #540]	; (80023c8 <HAL_GPIO_Init+0x284>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d020      	beq.n	80021f2 <HAL_GPIO_Init+0xae>
 80021b0:	4a86      	ldr	r2, [pc, #536]	; (80023cc <HAL_GPIO_Init+0x288>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01d      	beq.n	80021f2 <HAL_GPIO_Init+0xae>
          break;
 80021b6:	e036      	b.n	8002226 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021b8:	4a85      	ldr	r2, [pc, #532]	; (80023d0 <HAL_GPIO_Init+0x28c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0xae>
 80021be:	4a85      	ldr	r2, [pc, #532]	; (80023d4 <HAL_GPIO_Init+0x290>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d016      	beq.n	80021f2 <HAL_GPIO_Init+0xae>
 80021c4:	4a84      	ldr	r2, [pc, #528]	; (80023d8 <HAL_GPIO_Init+0x294>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0xae>
          break;
 80021ca:	e02c      	b.n	8002226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e028      	b.n	8002226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	3304      	adds	r3, #4
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e023      	b.n	8002226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	3308      	adds	r3, #8
 80021e4:	623b      	str	r3, [r7, #32]
          break;
 80021e6:	e01e      	b.n	8002226 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	330c      	adds	r3, #12
 80021ee:	623b      	str	r3, [r7, #32]
          break;
 80021f0:	e019      	b.n	8002226 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fa:	2304      	movs	r3, #4
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e012      	b.n	8002226 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	611a      	str	r2, [r3, #16]
          break;
 8002212:	e008      	b.n	8002226 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002214:	2308      	movs	r3, #8
 8002216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	615a      	str	r2, [r3, #20]
          break;
 800221e:	e002      	b.n	8002226 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2bff      	cmp	r3, #255	; 0xff
 800222a:	d801      	bhi.n	8002230 <HAL_GPIO_Init+0xec>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	e001      	b.n	8002234 <HAL_GPIO_Init+0xf0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2bff      	cmp	r3, #255	; 0xff
 800223a:	d802      	bhi.n	8002242 <HAL_GPIO_Init+0xfe>
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x104>
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3b08      	subs	r3, #8
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	210f      	movs	r1, #15
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	401a      	ands	r2, r3
 800225a:	6a39      	ldr	r1, [r7, #32]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	431a      	orrs	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8096 	beq.w	80023a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002276:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_GPIO_Init+0x298>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_GPIO_Init+0x298>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6193      	str	r3, [r2, #24]
 8002282:	4b56      	ldr	r3, [pc, #344]	; (80023dc <HAL_GPIO_Init+0x298>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800228e:	4a54      	ldr	r2, [pc, #336]	; (80023e0 <HAL_GPIO_Init+0x29c>)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <HAL_GPIO_Init+0x2a0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x19e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4a      	ldr	r2, [pc, #296]	; (80023e8 <HAL_GPIO_Init+0x2a4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x19a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a49      	ldr	r2, [pc, #292]	; (80023ec <HAL_GPIO_Init+0x2a8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x196>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <HAL_GPIO_Init+0x2ac>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x192>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x1a0>
 80022d6:	2304      	movs	r3, #4
 80022d8:	e004      	b.n	80022e4 <HAL_GPIO_Init+0x1a0>
 80022da:	2302      	movs	r3, #2
 80022dc:	e002      	b.n	80022e4 <HAL_GPIO_Init+0x1a0>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_GPIO_Init+0x1a0>
 80022e2:	2300      	movs	r3, #0
 80022e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e6:	f002 0203 	and.w	r2, r2, #3
 80022ea:	0092      	lsls	r2, r2, #2
 80022ec:	4093      	lsls	r3, r2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022f4:	493a      	ldr	r1, [pc, #232]	; (80023e0 <HAL_GPIO_Init+0x29c>)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	089b      	lsrs	r3, r3, #2
 80022fa:	3302      	adds	r3, #2
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4938      	ldr	r1, [pc, #224]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
 800231a:	e006      	b.n	800232a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	43db      	mvns	r3, r3
 8002324:	4933      	ldr	r1, [pc, #204]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002326:	4013      	ands	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	492e      	ldr	r1, [pc, #184]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
 8002342:	e006      	b.n	8002352 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	43db      	mvns	r3, r3
 800234c:	4929      	ldr	r1, [pc, #164]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 800234e:	4013      	ands	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	4924      	ldr	r1, [pc, #144]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	491f      	ldr	r1, [pc, #124]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002376:	4013      	ands	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	491a      	ldr	r1, [pc, #104]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	60cb      	str	r3, [r1, #12]
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	43db      	mvns	r3, r3
 800239c:	4915      	ldr	r1, [pc, #84]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 800239e:	4013      	ands	r3, r2
 80023a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	3301      	adds	r3, #1
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f47f aed0 	bne.w	8002158 <HAL_GPIO_Init+0x14>
  }
}
 80023b8:	bf00      	nop
 80023ba:	372c      	adds	r7, #44	; 0x2c
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	10210000 	.word	0x10210000
 80023c8:	10110000 	.word	0x10110000
 80023cc:	10120000 	.word	0x10120000
 80023d0:	10310000 	.word	0x10310000
 80023d4:	10320000 	.word	0x10320000
 80023d8:	10220000 	.word	0x10220000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40010800 	.word	0x40010800
 80023e8:	40010c00 	.word	0x40010c00
 80023ec:	40011000 	.word	0x40011000
 80023f0:	40011400 	.word	0x40011400
 80023f4:	40010400 	.word	0x40010400

080023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
 8002404:	4613      	mov	r3, r2
 8002406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002408:	787b      	ldrb	r3, [r7, #1]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002414:	e003      	b.n	800241e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	041a      	lsls	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e10f      	b.n	800265a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff f85a 	bl	8001508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2224      	movs	r2, #36	; 0x24
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800246c:	f000 fce6 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8002470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a7b      	ldr	r2, [pc, #492]	; (8002664 <HAL_I2C_Init+0x23c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d807      	bhi.n	800248c <HAL_I2C_Init+0x64>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4a7a      	ldr	r2, [pc, #488]	; (8002668 <HAL_I2C_Init+0x240>)
 8002480:	4293      	cmp	r3, r2
 8002482:	bf94      	ite	ls
 8002484:	2301      	movls	r3, #1
 8002486:	2300      	movhi	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e006      	b.n	800249a <HAL_I2C_Init+0x72>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a77      	ldr	r2, [pc, #476]	; (800266c <HAL_I2C_Init+0x244>)
 8002490:	4293      	cmp	r3, r2
 8002492:	bf94      	ite	ls
 8002494:	2301      	movls	r3, #1
 8002496:	2300      	movhi	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0db      	b.n	800265a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a72      	ldr	r2, [pc, #456]	; (8002670 <HAL_I2C_Init+0x248>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a64      	ldr	r2, [pc, #400]	; (8002664 <HAL_I2C_Init+0x23c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d802      	bhi.n	80024dc <HAL_I2C_Init+0xb4>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3301      	adds	r3, #1
 80024da:	e009      	b.n	80024f0 <HAL_I2C_Init+0xc8>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	4a63      	ldr	r2, [pc, #396]	; (8002674 <HAL_I2C_Init+0x24c>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	3301      	adds	r3, #1
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4956      	ldr	r1, [pc, #344]	; (8002664 <HAL_I2C_Init+0x23c>)
 800250c:	428b      	cmp	r3, r1
 800250e:	d80d      	bhi.n	800252c <HAL_I2C_Init+0x104>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e59      	subs	r1, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fbb1 f3f3 	udiv	r3, r1, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	2b04      	cmp	r3, #4
 8002526:	bf38      	it	cc
 8002528:	2304      	movcc	r3, #4
 800252a:	e04f      	b.n	80025cc <HAL_I2C_Init+0x1a4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d111      	bne.n	8002558 <HAL_I2C_Init+0x130>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e58      	subs	r0, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e012      	b.n	800257e <HAL_I2C_Init+0x156>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Init+0x15e>
 8002582:	2301      	movs	r3, #1
 8002584:	e022      	b.n	80025cc <HAL_I2C_Init+0x1a4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10e      	bne.n	80025ac <HAL_I2C_Init+0x184>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e58      	subs	r0, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	440b      	add	r3, r1
 800259c:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025aa:	e00f      	b.n	80025cc <HAL_I2C_Init+0x1a4>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	6809      	ldr	r1, [r1, #0]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6911      	ldr	r1, [r2, #16]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	4311      	orrs	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	000186a0 	.word	0x000186a0
 8002668:	001e847f 	.word	0x001e847f
 800266c:	003d08ff 	.word	0x003d08ff
 8002670:	431bde83 	.word	0x431bde83
 8002674:	10624dd3 	.word	0x10624dd3

08002678 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_PWR_EnableBkUpAccess+0x14>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	420e0020 	.word	0x420e0020

08002690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e26c      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8087 	beq.w	80027be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b0:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 030c 	and.w	r3, r3, #12
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d00c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026bc:	4b8f      	ldr	r3, [pc, #572]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d112      	bne.n	80026ee <HAL_RCC_OscConfig+0x5e>
 80026c8:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d10b      	bne.n	80026ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	4b89      	ldr	r3, [pc, #548]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d06c      	beq.n	80027bc <HAL_RCC_OscConfig+0x12c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d168      	bne.n	80027bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e246      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x76>
 80026f8:	4b80      	ldr	r3, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7f      	ldr	r2, [pc, #508]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e02e      	b.n	8002764 <HAL_RCC_OscConfig+0xd4>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x98>
 800270e:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b78      	ldr	r3, [pc, #480]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a77      	ldr	r2, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xd4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0xbc>
 8002732:	4b72      	ldr	r3, [pc, #456]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a71      	ldr	r2, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6e      	ldr	r2, [pc, #440]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xd4>
 800274c:	4b6b      	ldr	r3, [pc, #428]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6a      	ldr	r2, [pc, #424]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a67      	ldr	r2, [pc, #412]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f990 	bl	8001a90 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f98c 	bl	8001a90 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1fa      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b5d      	ldr	r3, [pc, #372]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xe4>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f97c 	bl	8001a90 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f978 	bl	8001a90 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1e6      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x10c>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ca:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x18c>
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x176>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1ba      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4939      	ldr	r1, [pc, #228]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	e03a      	b.n	8002892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7ff f931 	bl	8001a90 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002832:	f7ff f92d 	bl	8001a90 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e19b      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4927      	ldr	r1, [pc, #156]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_RCC_OscConfig+0x270>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff f910 	bl	8001a90 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002874:	f7ff f90c 	bl	8001a90 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e17a      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d03a      	beq.n	8002914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d019      	beq.n	80028da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_RCC_OscConfig+0x274>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7ff f8f0 	bl	8001a90 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff f8ec 	bl	8001a90 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e15a      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_RCC_OscConfig+0x26c>)
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f000 fb0a 	bl	8002eec <RCC_Delay>
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_RCC_OscConfig+0x274>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7ff f8d6 	bl	8001a90 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e6:	e00f      	b.n	8002908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e8:	f7ff f8d2 	bl	8001a90 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d908      	bls.n	8002908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e140      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	42420000 	.word	0x42420000
 8002904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	4b9e      	ldr	r3, [pc, #632]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e9      	bne.n	80028e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80a6 	beq.w	8002a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002926:	4b97      	ldr	r3, [pc, #604]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b94      	ldr	r3, [pc, #592]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a93      	ldr	r2, [pc, #588]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	61d3      	str	r3, [r2, #28]
 800293e:	4b91      	ldr	r3, [pc, #580]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b8e      	ldr	r3, [pc, #568]	; (8002b88 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295a:	4b8b      	ldr	r3, [pc, #556]	; (8002b88 <HAL_RCC_OscConfig+0x4f8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a8a      	ldr	r2, [pc, #552]	; (8002b88 <HAL_RCC_OscConfig+0x4f8>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7ff f893 	bl	8001a90 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7ff f88f 	bl	8001a90 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b64      	cmp	r3, #100	; 0x64
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e0fd      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x4f8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x312>
 8002994:	4b7b      	ldr	r3, [pc, #492]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a7a      	ldr	r2, [pc, #488]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e02d      	b.n	80029fe <HAL_RCC_OscConfig+0x36e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x334>
 80029aa:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a75      	ldr	r2, [pc, #468]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6213      	str	r3, [r2, #32]
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a72      	ldr	r2, [pc, #456]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	e01c      	b.n	80029fe <HAL_RCC_OscConfig+0x36e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d10c      	bne.n	80029e6 <HAL_RCC_OscConfig+0x356>
 80029cc:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4a6c      	ldr	r2, [pc, #432]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6213      	str	r3, [r2, #32]
 80029e4:	e00b      	b.n	80029fe <HAL_RCC_OscConfig+0x36e>
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6213      	str	r3, [r2, #32]
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4a63      	ldr	r2, [pc, #396]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d015      	beq.n	8002a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7ff f843 	bl	8001a90 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7ff f83f 	bl	8001a90 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0ab      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ee      	beq.n	8002a0e <HAL_RCC_OscConfig+0x37e>
 8002a30:	e014      	b.n	8002a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7ff f82d 	bl	8001a90 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7ff f829 	bl	8001a90 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e095      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a50:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ee      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d105      	bne.n	8002a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a62:	4b48      	ldr	r3, [pc, #288]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4a47      	ldr	r2, [pc, #284]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8081 	beq.w	8002b7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a78:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d061      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d146      	bne.n	8002b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_OscConfig+0x4fc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fffd 	bl	8001a90 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe fff9 	bl	8001a90 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e067      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aac:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	492d      	ldr	r1, [pc, #180]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a19      	ldr	r1, [r3, #32]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	4927      	ldr	r1, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_RCC_OscConfig+0x4fc>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe ffcd 	bl	8001a90 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe ffc9 	bl	8001a90 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e037      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x46a>
 8002b18:	e02f      	b.n	8002b7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_RCC_OscConfig+0x4fc>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe ffb6 	bl	8001a90 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe ffb2 	bl	8001a90 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e020      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x498>
 8002b46:	e018      	b.n	8002b7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e013      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_OscConfig+0x4f4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42420060 	.word	0x42420060

08002b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0d0      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d910      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	4965      	ldr	r1, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d040      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d115      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e073      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06b      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4936      	ldr	r1, [pc, #216]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c80:	f7fe ff06 	bl	8001a90 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fe ff02 	bl	8001a90 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e053      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d210      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	4922      	ldr	r1, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 f821 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d22:	4601      	mov	r1, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c8>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
 8002d32:	fa21 f303 	lsr.w	r3, r1, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1cc>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1d0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fd60 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40022000 	.word	0x40022000
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08008064 	.word	0x08008064
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b490      	push	{r4, r7}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d6c:	1d3c      	adds	r4, r7, #4
 8002d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d74:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x46>
 8002da2:	e02d      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002da6:	623b      	str	r3, [r7, #32]
      break;
 8002da8:	e02d      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	0c9b      	lsrs	r3, r3, #18
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002db6:	4413      	add	r3, r2
 8002db8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0c5b      	lsrs	r3, r3, #17
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ddc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de2:	fb02 f203 	mul.w	r2, r2, r3
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	e004      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	623b      	str	r3, [r7, #32]
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e02:	623b      	str	r3, [r7, #32]
      break;
 8002e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3728      	adds	r7, #40	; 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc90      	pop	{r4, r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	08007708 	.word	0x08007708
 8002e18:	08007718 	.word	0x08007718
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	007a1200 	.word	0x007a1200
 8002e24:	003d0900 	.word	0x003d0900

08002e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b02      	ldr	r3, [pc, #8]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20000000 	.word	0x20000000

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff2 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e44:	4601      	mov	r1, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08008074 	.word	0x08008074

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffde 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4601      	mov	r1, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	0adb      	lsrs	r3, r3, #11
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	08008074 	.word	0x08008074

08002e8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	220f      	movs	r2, #15
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_RCC_GetClockConfig+0x58>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_RCC_GetClockConfig+0x58>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_GetClockConfig+0x58>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RCC_GetClockConfig+0x58>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0207 	and.w	r2, r3, #7
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40022000 	.word	0x40022000

08002eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <RCC_Delay+0x34>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <RCC_Delay+0x38>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0a5b      	lsrs	r3, r3, #9
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f08:	bf00      	nop
  }
  while (Delay --);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	60fa      	str	r2, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f9      	bne.n	8002f08 <RCC_Delay+0x1c>
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000
 8002f24:	10624dd3 	.word	0x10624dd3

08002f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d07d      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f48:	4b4f      	ldr	r3, [pc, #316]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10d      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4a4b      	ldr	r2, [pc, #300]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	61d3      	str	r3, [r2, #28]
 8002f60:	4b49      	ldr	r3, [pc, #292]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b46      	ldr	r3, [pc, #280]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d118      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7c:	4b43      	ldr	r3, [pc, #268]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a42      	ldr	r2, [pc, #264]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f88:	f7fe fd82 	bl	8001a90 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f90:	f7fe fd7e 	bl	8001a90 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e06d      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02e      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d027      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fdc:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fe2:	4a29      	ldr	r2, [pc, #164]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d014      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fd4d 	bl	8001a90 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe fd49 	bl	8001a90 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e036      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ee      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4917      	ldr	r1, [pc, #92]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302a:	4313      	orrs	r3, r2
 800302c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	490b      	ldr	r1, [pc, #44]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	4904      	ldr	r1, [pc, #16]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	40007000 	.word	0x40007000
 8003090:	42420440 	.word	0x42420440

08003094 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b08d      	sub	sp, #52	; 0x34
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800309c:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800309e:	f107 040c 	add.w	r4, r7, #12
 80030a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	2300      	movs	r3, #0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d07f      	beq.n	80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d002      	beq.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d048      	beq.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80030d0:	e08b      	b.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80030d8:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d07f      	beq.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80030f0:	4413      	add	r3, r2
 80030f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030f6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d018      	beq.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003102:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0c5b      	lsrs	r3, r3, #17
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003110:	4413      	add	r3, r2
 8003112:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003122:	4a37      	ldr	r2, [pc, #220]	; (8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	fbb2 f2f3 	udiv	r2, r2, r3
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003132:	e004      	b.n	800313e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	4a33      	ldr	r2, [pc, #204]	; (8003204 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800313e:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314a:	d102      	bne.n	8003152 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003150:	e048      	b.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003160:	e040      	b.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003172:	d108      	bne.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
 8003184:	e01f      	b.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003190:	d109      	bne.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003192:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800319e:	f649 4340 	movw	r3, #40000	; 0x9c40
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a4:	e00f      	b.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b0:	d11a      	bne.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d014      	beq.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80031be:	f24f 4324 	movw	r3, #62500	; 0xf424
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031c4:	e010      	b.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80031c6:	e00f      	b.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80031c8:	f7ff fe4c 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	0b9b      	lsrs	r3, r3, #14
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	3301      	adds	r3, #1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80031e8:	bf00      	nop
    }
  }
  return (frequency);
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3734      	adds	r7, #52	; 0x34
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd90      	pop	{r4, r7, pc}
 80031f4:	0800771c 	.word	0x0800771c
 80031f8:	0800772c 	.word	0x0800772c
 80031fc:	40021000 	.word	0x40021000
 8003200:	007a1200 	.word	0x007a1200
 8003204:	003d0900 	.word	0x003d0900
 8003208:	aaaaaaab 	.word	0xaaaaaaab

0800320c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e084      	b.n	800332c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7c5b      	ldrb	r3, [r3, #17]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe f9a8 	bl	8001588 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f952 	bl	80034e8 <HAL_RTC_WaitForSynchro>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2204      	movs	r2, #4
 800324e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e06b      	b.n	800332c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fa0b 	bl	8003670 <RTC_EnterInitMode>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e060      	b.n	800332c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0207 	bic.w	r2, r2, #7
 8003278:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_RTC_Init+0x128>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <HAL_RTC_Init+0x128>)
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RTC_Init+0x128>)
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4926      	ldr	r1, [pc, #152]	; (8003334 <HAL_RTC_Init+0x128>)
 800329c:	4313      	orrs	r3, r2
 800329e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a8:	d003      	beq.n	80032b2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e00e      	b.n	80032d0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f7ff feee 	bl	8003094 <HAL_RCCEx_GetPeriphCLKFreq>
 80032b8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2204      	movs	r2, #4
 80032c4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e030      	b.n	800332c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f023 010f 	bic.w	r1, r3, #15
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	0c1a      	lsrs	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	b291      	uxth	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f9df 	bl	80036c0 <RTC_ExitInitMode>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2204      	movs	r2, #4
 800330c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00c      	b.n	800332c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800332a:	2300      	movs	r3, #0
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40006c00 	.word	0x40006c00

08003338 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_RTC_GetTime+0x28>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b5      	b.n	80034d0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0ac      	b.n	80034d0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8e3 	bl	8003542 <RTC_ReadTimeCounter>
 800337c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4a55      	ldr	r2, [pc, #340]	; (80034d8 <HAL_RTC_GetTime+0x1a0>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0adb      	lsrs	r3, r3, #11
 8003388:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <HAL_RTC_GetTime+0x1a0>)
 800338e:	fba3 1302 	umull	r1, r3, r3, r2
 8003392:	0adb      	lsrs	r3, r3, #11
 8003394:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4a4f      	ldr	r2, [pc, #316]	; (80034dc <HAL_RTC_GetTime+0x1a4>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <HAL_RTC_GetTime+0x1a0>)
 80033b0:	fba2 1203 	umull	r1, r2, r2, r3
 80033b4:	0ad2      	lsrs	r2, r2, #11
 80033b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80033ba:	fb01 f202 	mul.w	r2, r1, r2
 80033be:	1a9a      	subs	r2, r3, r2
 80033c0:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RTC_GetTime+0x1a4>)
 80033c2:	fba3 1302 	umull	r1, r3, r3, r2
 80033c6:	0959      	lsrs	r1, r3, #5
 80033c8:	460b      	mov	r3, r1
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a5b      	subs	r3, r3, r1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	1ad1      	subs	r1, r2, r3
 80033d2:	b2ca      	uxtb	r2, r1
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	2b17      	cmp	r3, #23
 80033dc:	d955      	bls.n	800348a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4a3f      	ldr	r2, [pc, #252]	; (80034e0 <HAL_RTC_GetTime+0x1a8>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80033ea:	6939      	ldr	r1, [r7, #16]
 80033ec:	4b3c      	ldr	r3, [pc, #240]	; (80034e0 <HAL_RTC_GetTime+0x1a8>)
 80033ee:	fba3 2301 	umull	r2, r3, r3, r1
 80033f2:	091a      	lsrs	r2, r3, #4
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1aca      	subs	r2, r1, r3
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f8f3 	bl	80035f0 <RTC_ReadAlarmCounter>
 800340a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003412:	d008      	beq.n	8003426 <HAL_RTC_GetTime+0xee>
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	429a      	cmp	r2, r3
 800341a:	d904      	bls.n	8003426 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	61fb      	str	r3, [r7, #28]
 8003424:	e002      	b.n	800342c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800342a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4a2d      	ldr	r2, [pc, #180]	; (80034e4 <HAL_RTC_GetTime+0x1ac>)
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800343a:	69b9      	ldr	r1, [r7, #24]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f8b0 	bl	80035a2 <RTC_WriteTimeCounter>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e041      	b.n	80034d0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003452:	d00c      	beq.n	800346e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4413      	add	r3, r2
 800345a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800345c:	69f9      	ldr	r1, [r7, #28]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8df 	bl	8003622 <RTC_WriteAlarmCounter>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e030      	b.n	80034d0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800346e:	69f9      	ldr	r1, [r7, #28]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f8d6 	bl	8003622 <RTC_WriteAlarmCounter>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e027      	b.n	80034d0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003480:	6979      	ldr	r1, [r7, #20]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f961 	bl	800374a <RTC_DateUpdate>
 8003488:	e003      	b.n	8003492 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01a      	beq.n	80034ce <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f937 	bl	8003710 <RTC_ByteToBcd2>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f92e 	bl	8003710 <RTC_ByteToBcd2>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f925 	bl	8003710 <RTC_ByteToBcd2>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	91a2b3c5 	.word	0x91a2b3c5
 80034dc:	88888889 	.word	0x88888889
 80034e0:	aaaaaaab 	.word	0xaaaaaaab
 80034e4:	00015180 	.word	0x00015180

080034e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e01d      	b.n	800353a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0208 	bic.w	r2, r2, #8
 800350c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800350e:	f7fe fabf 	bl	8001a90 <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003514:	e009      	b.n	800352a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003516:	f7fe fabb 	bl	8001a90 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003524:	d901      	bls.n	800352a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e007      	b.n	800353a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ee      	beq.n	8003516 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003542:	b480      	push	{r7}
 8003544:	b087      	sub	sp, #28
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	827b      	strh	r3, [r7, #18]
 800354e:	2300      	movs	r3, #0
 8003550:	823b      	strh	r3, [r7, #16]
 8003552:	2300      	movs	r3, #0
 8003554:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003572:	8a7a      	ldrh	r2, [r7, #18]
 8003574:	8a3b      	ldrh	r3, [r7, #16]
 8003576:	429a      	cmp	r2, r3
 8003578:	d008      	beq.n	800358c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800357a:	8a3b      	ldrh	r3, [r7, #16]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	b29b      	uxth	r3, r3
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e004      	b.n	8003596 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800358c:	8a7b      	ldrh	r3, [r7, #18]
 800358e:	041a      	lsls	r2, r3, #16
 8003590:	89fb      	ldrh	r3, [r7, #14]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003596:	697b      	ldr	r3, [r7, #20]
}
 8003598:	4618      	mov	r0, r3
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f85d 	bl	8003670 <RTC_EnterInitMode>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e011      	b.n	80035e6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	0c12      	lsrs	r2, r2, #16
 80035ca:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	b292      	uxth	r2, r2
 80035d4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f872 	bl	80036c0 <RTC_ExitInitMode>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	81fb      	strh	r3, [r7, #14]
 80035fc:	2300      	movs	r3, #0
 80035fe:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003610:	89fb      	ldrh	r3, [r7, #14]
 8003612:	041a      	lsls	r2, r3, #16
 8003614:	89bb      	ldrh	r3, [r7, #12]
 8003616:	4313      	orrs	r3, r2
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f81d 	bl	8003670 <RTC_EnterInitMode>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	e011      	b.n	8003666 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	0c12      	lsrs	r2, r2, #16
 800364a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b292      	uxth	r2, r2
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f832 	bl	80036c0 <RTC_ExitInitMode>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800367c:	f7fe fa08 	bl	8001a90 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003682:	e009      	b.n	8003698 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003684:	f7fe fa04 	bl	8001a90 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003692:	d901      	bls.n	8003698 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e00f      	b.n	80036b8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0210 	orr.w	r2, r2, #16
 80036b4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0210 	bic.w	r2, r2, #16
 80036da:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80036dc:	f7fe f9d8 	bl	8001a90 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036e2:	e009      	b.n	80036f8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036e4:	f7fe f9d4 	bl	8001a90 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f2:	d901      	bls.n	80036f8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e007      	b.n	8003708 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0ee      	beq.n	80036e4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800371e:	e005      	b.n	800372c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	3b0a      	subs	r3, #10
 800372a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b09      	cmp	r3, #9
 8003730:	d8f6      	bhi.n	8003720 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	b2da      	uxtb	r2, r3
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	4313      	orrs	r3, r2
 800373e:	b2db      	uxtb	r3, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7bdb      	ldrb	r3, [r3, #15]
 8003768:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7b5b      	ldrb	r3, [r3, #13]
 800376e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	7b9b      	ldrb	r3, [r3, #14]
 8003774:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	e06f      	b.n	800385c <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d011      	beq.n	80037a6 <RTC_DateUpdate+0x5c>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d00e      	beq.n	80037a6 <RTC_DateUpdate+0x5c>
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b05      	cmp	r3, #5
 800378c:	d00b      	beq.n	80037a6 <RTC_DateUpdate+0x5c>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b07      	cmp	r3, #7
 8003792:	d008      	beq.n	80037a6 <RTC_DateUpdate+0x5c>
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b08      	cmp	r3, #8
 8003798:	d005      	beq.n	80037a6 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b0a      	cmp	r3, #10
 800379e:	d002      	beq.n	80037a6 <RTC_DateUpdate+0x5c>
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d117      	bne.n	80037d6 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b1e      	cmp	r3, #30
 80037aa:	d803      	bhi.n	80037b4 <RTC_DateUpdate+0x6a>
      {
        day++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80037b2:	e050      	b.n	8003856 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d005      	beq.n	80037c6 <RTC_DateUpdate+0x7c>
        {
          month++;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3301      	adds	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
          day = 1U;
 80037c0:	2301      	movs	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80037c4:	e047      	b.n	8003856 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80037c6:	2301      	movs	r3, #1
 80037c8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80037ca:	2301      	movs	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]
          year++;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80037d4:	e03f      	b.n	8003856 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d008      	beq.n	80037ee <RTC_DateUpdate+0xa4>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d005      	beq.n	80037ee <RTC_DateUpdate+0xa4>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b09      	cmp	r3, #9
 80037e6:	d002      	beq.n	80037ee <RTC_DateUpdate+0xa4>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b0b      	cmp	r3, #11
 80037ec:	d10c      	bne.n	8003808 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b1d      	cmp	r3, #29
 80037f2:	d803      	bhi.n	80037fc <RTC_DateUpdate+0xb2>
      {
        day++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80037fa:	e02c      	b.n	8003856 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	3301      	adds	r3, #1
 8003800:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003802:	2301      	movs	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003806:	e026      	b.n	8003856 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d123      	bne.n	8003856 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b1b      	cmp	r3, #27
 8003812:	d803      	bhi.n	800381c <RTC_DateUpdate+0xd2>
      {
        day++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e01c      	b.n	8003856 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b1c      	cmp	r3, #28
 8003820:	d111      	bne.n	8003846 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	b29b      	uxth	r3, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f838 	bl	800389c <RTC_IsLeapYear>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <RTC_DateUpdate+0xf0>
        {
          day++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3301      	adds	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e00d      	b.n	8003856 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003840:	2301      	movs	r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e007      	b.n	8003856 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b1d      	cmp	r3, #29
 800384a:	d104      	bne.n	8003856 <RTC_DateUpdate+0x10c>
      {
        month++;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3301      	adds	r3, #1
 8003850:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3301      	adds	r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d38b      	bcc.n	800377c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	4619      	mov	r1, r3
 8003886:	6978      	ldr	r0, [r7, #20]
 8003888:	f000 f83a 	bl	8003900 <RTC_WeekDayNum>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	731a      	strb	r2, [r3, #12]
}
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e01d      	b.n	80038f2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	4a10      	ldr	r2, [pc, #64]	; (80038fc <RTC_IsLeapYear+0x60>)
 80038ba:	fba2 1203 	umull	r1, r2, r2, r3
 80038be:	0952      	lsrs	r2, r2, #5
 80038c0:	2164      	movs	r1, #100	; 0x64
 80038c2:	fb01 f202 	mul.w	r2, r1, r2
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00f      	b.n	80038f2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <RTC_IsLeapYear+0x60>)
 80038d6:	fba2 1203 	umull	r1, r2, r2, r3
 80038da:	09d2      	lsrs	r2, r2, #7
 80038dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80038e0:	fb01 f202 	mul.w	r2, r1, r2
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80038f0:	2300      	movs	r3, #0
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	51eb851f 	.word	0x51eb851f

08003900 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
 800390c:	4613      	mov	r3, r2
 800390e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800391e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d82d      	bhi.n	8003982 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <RTC_WeekDayNum+0xe4>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	085a      	lsrs	r2, r3, #1
 800393a:	78bb      	ldrb	r3, [r7, #2]
 800393c:	441a      	add	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	441a      	add	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3b01      	subs	r3, #1
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3b01      	subs	r3, #1
 800394e:	4926      	ldr	r1, [pc, #152]	; (80039e8 <RTC_WeekDayNum+0xe8>)
 8003950:	fba1 1303 	umull	r1, r3, r1, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	3b01      	subs	r3, #1
 800395c:	4922      	ldr	r1, [pc, #136]	; (80039e8 <RTC_WeekDayNum+0xe8>)
 800395e:	fba1 1303 	umull	r1, r3, r1, r3
 8003962:	09db      	lsrs	r3, r3, #7
 8003964:	4413      	add	r3, r2
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <RTC_WeekDayNum+0xec>)
 800396a:	fba3 1302 	umull	r1, r3, r3, r2
 800396e:	1ad1      	subs	r1, r2, r3
 8003970:	0849      	lsrs	r1, r1, #1
 8003972:	440b      	add	r3, r1
 8003974:	0899      	lsrs	r1, r3, #2
 8003976:	460b      	mov	r3, r1
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	1a5b      	subs	r3, r3, r1
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e029      	b.n	80039d6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <RTC_WeekDayNum+0xe4>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	085a      	lsrs	r2, r3, #1
 8003996:	78bb      	ldrb	r3, [r7, #2]
 8003998:	441a      	add	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	441a      	add	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4910      	ldr	r1, [pc, #64]	; (80039e8 <RTC_WeekDayNum+0xe8>)
 80039a8:	fba1 1303 	umull	r1, r3, r1, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	490d      	ldr	r1, [pc, #52]	; (80039e8 <RTC_WeekDayNum+0xe8>)
 80039b4:	fba1 1303 	umull	r1, r3, r1, r3
 80039b8:	09db      	lsrs	r3, r3, #7
 80039ba:	4413      	add	r3, r2
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <RTC_WeekDayNum+0xec>)
 80039c0:	fba3 1302 	umull	r1, r3, r3, r2
 80039c4:	1ad1      	subs	r1, r2, r3
 80039c6:	0849      	lsrs	r1, r1, #1
 80039c8:	440b      	add	r3, r1
 80039ca:	0899      	lsrs	r1, r3, #2
 80039cc:	460b      	mov	r3, r1
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1a5b      	subs	r3, r3, r1
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	b2db      	uxtb	r3, r3
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	38e38e39 	.word	0x38e38e39
 80039e8:	51eb851f 	.word	0x51eb851f
 80039ec:	24924925 	.word	0x24924925

080039f0 <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e01a      	b.n	8003a38 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7c1b      	ldrb	r3, [r3, #16]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_RTCEx_SetSecond_IT+0x1e>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e014      	b.n	8003a38 <HAL_RTCEx_SetSecond_IT+0x48>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	745a      	strb	r2, [r3, #17]

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d024      	beq.n	8003aa2 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01d      	beq.n	8003aa2 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f818 	bl	8003aaa <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f06f 0204 	mvn.w	r2, #4
 8003a82:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2204      	movs	r2, #4
 8003a88:	745a      	strb	r2, [r3, #17]
 8003a8a:	e005      	b.n	8003a98 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7fc fb5f 	bl	8000150 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0201 	mvn.w	r2, #1
 8003aa0:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e053      	b.n	8003b76 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7fd fd79 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b04:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	ea42 0103 	orr.w	r1, r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	0c1a      	lsrs	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f002 0204 	and.w	r2, r2, #4
 8003b54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_SPI_Transmit_DMA+0x20>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e093      	b.n	8003cc8 <HAL_SPI_Transmit_DMA+0x148>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d002      	beq.n	8003bba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bb8:	e081      	b.n	8003cbe <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_SPI_Transmit_DMA+0x46>
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bca:	e078      	b.n	8003cbe <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2203      	movs	r2, #3
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	88fa      	ldrh	r2, [r7, #6]
 8003be4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d107      	bne.n	8003c24 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_SPI_Transmit_DMA+0x150>)
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	4a28      	ldr	r2, [pc, #160]	; (8003cd4 <HAL_SPI_Transmit_DMA+0x154>)
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_SPI_Transmit_DMA+0x158>)
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	2200      	movs	r2, #0
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c5c:	f7fe f85c 	bl	8001d18 <HAL_DMA_Start_IT>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c7e:	e01e      	b.n	8003cbe <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d007      	beq.n	8003c9e <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0220 	orr.w	r2, r2, #32
 8003cac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0202 	orr.w	r2, r2, #2
 8003cbc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08003db9 	.word	0x08003db9
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003dd5 	.word	0x08003dd5

08003cdc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d20:	f7fd feb6 	bl	8001a90 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d03b      	beq.n	8003dac <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0220 	bic.w	r2, r2, #32
 8003d42:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0202 	bic.w	r2, r2, #2
 8003d52:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	2164      	movs	r1, #100	; 0x64
 8003d58:	6978      	ldr	r0, [r7, #20]
 8003d5a:	f000 f8c5 	bl	8003ee8 <SPI_EndRxTxTransaction>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003da4:	6978      	ldr	r0, [r7, #20]
 8003da6:	f7ff ffab 	bl	8003d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003daa:	e002      	b.n	8003db2 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003dac:	6978      	ldr	r0, [r7, #20]
 8003dae:	f7ff ff95 	bl	8003cdc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff ff91 	bl	8003cee <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0203 	bic.w	r2, r2, #3
 8003df0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	f043 0210 	orr.w	r2, r3, #16
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff ff7a 	bl	8003d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e24:	e04c      	b.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2c:	d048      	beq.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003e2e:	f7fd fe2f 	bl	8001a90 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d902      	bls.n	8003e44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d13d      	bne.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5c:	d111      	bne.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e66:	d004      	beq.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d107      	bne.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8a:	d10f      	bne.n	8003eac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e00f      	b.n	8003ee0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d1a3      	bne.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff ff88 	bl	8003e14 <SPI_WaitFlagStateUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e000      	b.n	8003f1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01d      	b.n	8003f72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f815 	bl	8003f7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 f962 	bl	800422c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d007      	beq.n	8003fc6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d122      	bne.n	800402e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d11b      	bne.n	800402e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f06f 0202 	mvn.w	r2, #2
 8003ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f8ed 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 800401a:	e005      	b.n	8004028 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f8e0 	bl	80041e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8ef 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b04      	cmp	r3, #4
 800403a:	d122      	bne.n	8004082 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d11b      	bne.n	8004082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0204 	mvn.w	r2, #4
 8004052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f8c3 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 800406e:	e005      	b.n	800407c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8b6 	bl	80041e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8c5 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b08      	cmp	r3, #8
 800408e:	d122      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d11b      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f06f 0208 	mvn.w	r2, #8
 80040a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f899 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 80040c2:	e005      	b.n	80040d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f88c 	bl	80041e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f89b 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d122      	bne.n	800412a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d11b      	bne.n	800412a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f06f 0210 	mvn.w	r2, #16
 80040fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2208      	movs	r2, #8
 8004100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f86f 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8004116:	e005      	b.n	8004124 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f862 	bl	80041e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f871 	bl	8004206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d10e      	bne.n	8004156 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f06f 0201 	mvn.w	r2, #1
 800414e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fd f989 	bl	8001468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8c0 	bl	8004302 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d10e      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d107      	bne.n	80041ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f835 	bl	8004218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d10e      	bne.n	80041da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d107      	bne.n	80041da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0220 	mvn.w	r2, #32
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f88b 	bl	80042f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
	...

0800422c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <TIM_Base_SetConfig+0xb8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x30>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x30>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a26      	ldr	r2, [pc, #152]	; (80042e8 <TIM_Base_SetConfig+0xbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x30>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a25      	ldr	r2, [pc, #148]	; (80042ec <TIM_Base_SetConfig+0xc0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <TIM_Base_SetConfig+0xb8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00b      	beq.n	800428e <TIM_Base_SetConfig+0x62>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d007      	beq.n	800428e <TIM_Base_SetConfig+0x62>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <TIM_Base_SetConfig+0xbc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_Base_SetConfig+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <TIM_Base_SetConfig+0xc0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <TIM_Base_SetConfig+0xb8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d103      	bne.n	80042d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	615a      	str	r2, [r3, #20]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800

080042f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e03f      	b.n	80043a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd f9b8 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fb77 	bl	8004a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800436c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800437c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800438c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d166      	bne.n	8004498 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_UART_Receive_DMA+0x26>
 80043d0:	88fb      	ldrh	r3, [r7, #6]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e05f      	b.n	800449a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Receive_DMA+0x38>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e058      	b.n	800449a <HAL_UART_Receive_DMA+0xea>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2222      	movs	r2, #34	; 0x22
 8004406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	4a25      	ldr	r2, [pc, #148]	; (80044a4 <HAL_UART_Receive_DMA+0xf4>)
 8004410:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	4a24      	ldr	r2, [pc, #144]	; (80044a8 <HAL_UART_Receive_DMA+0xf8>)
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_UART_Receive_DMA+0xfc>)
 8004420:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	2200      	movs	r2, #0
 8004428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	f7fd fc69 	bl	8001d18 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004472:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004492:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	080046cd 	.word	0x080046cd
 80044a8:	08004735 	.word	0x08004735
 80044ac:	08004751 	.word	0x08004751

080044b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_UART_IRQHandler+0x52>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fa25 	bl	800494a <UART_Receive_IT>
      return;
 8004500:	e0cc      	b.n	800469c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80ab 	beq.w	8004660 <HAL_UART_IRQHandler+0x1b0>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <HAL_UART_IRQHandler+0x70>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80a0 	beq.w	8004660 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_UART_IRQHandler+0x90>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	f043 0201 	orr.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_UART_IRQHandler+0xb0>
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	f043 0202 	orr.w	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_UART_IRQHandler+0xd0>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_UART_IRQHandler+0xf0>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	f043 0208 	orr.w	r2, r3, #8
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d078      	beq.n	800469a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <HAL_UART_IRQHandler+0x112>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f9c4 	bl	800494a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <HAL_UART_IRQHandler+0x13a>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d031      	beq.n	800464e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f90f 	bl	800480e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d023      	beq.n	8004646 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800460c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	2b00      	cmp	r3, #0
 8004614:	d013      	beq.n	800463e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <HAL_UART_IRQHandler+0x1f4>)
 800461c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd fbd8 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004638:	4610      	mov	r0, r2
 800463a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463c:	e00e      	b.n	800465c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fb fdae 	bl	80001a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	e00a      	b.n	800465c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fb fdaa 	bl	80001a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464c:	e006      	b.n	800465c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fb fda6 	bl	80001a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800465a:	e01e      	b.n	800469a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	bf00      	nop
    return;
 800465e:	e01c      	b.n	800469a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <HAL_UART_IRQHandler+0x1cc>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f8fb 	bl	8004870 <UART_Transmit_IT>
    return;
 800467a:	e00f      	b.n	800469c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_UART_IRQHandler+0x1ec>
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f942 	bl	800491a <UART_EndTransmit_IT>
    return;
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <HAL_UART_IRQHandler+0x1ec>
    return;
 800469a:	bf00      	nop
  }
}
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	08004849 	.word	0x08004849

080046a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr

080046ba <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11e      	bne.n	8004726 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0201 	bic.w	r2, r2, #1
 800470c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7fb fd28 	bl	800017c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff ffb9 	bl	80046ba <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b21      	cmp	r3, #33	; 0x21
 8004782:	d108      	bne.n	8004796 <UART_DMAError+0x46>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004790:	68b8      	ldr	r0, [r7, #8]
 8004792:	f000 f827 	bl	80047e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b22      	cmp	r3, #34	; 0x22
 80047b6:	d108      	bne.n	80047ca <UART_DMAError+0x7a>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047c4:	68b8      	ldr	r0, [r7, #8]
 80047c6:	f000 f822 	bl	800480e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	f043 0210 	orr.w	r2, r3, #16
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	f7fb fce2 	bl	80001a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80047fa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004824:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7fb fc9c 	bl	80001a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b21      	cmp	r3, #33	; 0x21
 8004882:	d144      	bne.n	800490e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488c:	d11a      	bne.n	80048c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d105      	bne.n	80048b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	1c9a      	adds	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	621a      	str	r2, [r3, #32]
 80048b6:	e00e      	b.n	80048d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]
 80048c2:	e008      	b.n	80048d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	1c59      	adds	r1, r3, #1
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6211      	str	r1, [r2, #32]
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4619      	mov	r1, r3
 80048e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004908:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e000      	b.n	8004910 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800490e:	2302      	movs	r3, #2
  }
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004930:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff feb4 	bl	80046a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b22      	cmp	r3, #34	; 0x22
 800495c:	d171      	bne.n	8004a42 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004966:	d123      	bne.n	80049b0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10e      	bne.n	8004994 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	1c9a      	adds	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
 8004992:	e029      	b.n	80049e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	b29b      	uxth	r3, r3
 800499c:	b2db      	uxtb	r3, r3
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
 80049ae:	e01b      	b.n	80049e8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6858      	ldr	r0, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6291      	str	r1, [r2, #40]	; 0x28
 80049c8:	b2c2      	uxtb	r2, r0
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e00c      	b.n	80049e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	1c58      	adds	r0, r3, #1
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	6288      	str	r0, [r1, #40]	; 0x28
 80049e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4619      	mov	r1, r3
 80049f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d120      	bne.n	8004a3e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0220 	bic.w	r2, r2, #32
 8004a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fb fba1 	bl	800017c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e002      	b.n	8004a44 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a86:	f023 030c 	bic.w	r3, r3, #12
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a52      	ldr	r2, [pc, #328]	; (8004bf8 <UART_SetConfig+0x1ac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d14e      	bne.n	8004b52 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7fe f9d6 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009a      	lsls	r2, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	4a4a      	ldr	r2, [pc, #296]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	0119      	lsls	r1, r3, #4
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009a      	lsls	r2, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af0:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004af2:	fba3 0302 	umull	r0, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2064      	movs	r0, #100	; 0x64
 8004afa:	fb00 f303 	mul.w	r3, r0, r3
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	3332      	adds	r3, #50	; 0x32
 8004b04:	4a3d      	ldr	r2, [pc, #244]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b10:	4419      	add	r1, r3
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b28:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2064      	movs	r0, #100	; 0x64
 8004b32:	fb00 f303 	mul.w	r3, r0, r3
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	3332      	adds	r3, #50	; 0x32
 8004b3c:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004b50:	e04d      	b.n	8004bee <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b52:	f7fe f973 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8004b56:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009a      	lsls	r2, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	4a23      	ldr	r2, [pc, #140]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	0119      	lsls	r1, r3, #4
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009a      	lsls	r2, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004b90:	fba3 0302 	umull	r0, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2064      	movs	r0, #100	; 0x64
 8004b98:	fb00 f303 	mul.w	r3, r0, r3
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	3332      	adds	r3, #50	; 0x32
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bae:	4419      	add	r1, r3
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009a      	lsls	r2, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004bc8:	fba3 0302 	umull	r0, r3, r3, r2
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	2064      	movs	r0, #100	; 0x64
 8004bd0:	fb00 f303 	mul.w	r3, r0, r3
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	3332      	adds	r3, #50	; 0x32
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <UART_SetConfig+0x1b0>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	f003 020f 	and.w	r2, r3, #15
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	440a      	add	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40013800 	.word	0x40013800
 8004bfc:	51eb851f 	.word	0x51eb851f

08004c00 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c06:	f3ef 8305 	mrs	r3, IPSR
 8004c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c12:	f3ef 8310 	mrs	r3, PRIMASK
 8004c16:	607b      	str	r3, [r7, #4]
  return(result);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <osKernelInitialize+0x32>
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <osKernelInitialize+0x60>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d109      	bne.n	8004c3a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c26:	f3ef 8311 	mrs	r3, BASEPRI
 8004c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c32:	f06f 0305 	mvn.w	r3, #5
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e00c      	b.n	8004c54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <osKernelInitialize+0x60>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d105      	bne.n	8004c4e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <osKernelInitialize+0x60>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e002      	b.n	8004c54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c54:	68fb      	ldr	r3, [r7, #12]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	200000bc 	.word	0x200000bc

08004c64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c6a:	f3ef 8305 	mrs	r3, IPSR
 8004c6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c76:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7a:	607b      	str	r3, [r7, #4]
  return(result);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <osKernelStart+0x32>
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <osKernelStart+0x64>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d109      	bne.n	8004c9e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c96:	f06f 0305 	mvn.w	r3, #5
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e00e      	b.n	8004cbc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <osKernelStart+0x64>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <osKernelStart+0x64>)
 8004ca8:	2202      	movs	r2, #2
 8004caa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004cac:	f001 f904 	bl	8005eb8 <vTaskStartScheduler>
      stat = osOK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e002      	b.n	8004cbc <osKernelStart+0x58>
    } else {
      stat = osError;
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200000bc 	.word	0x200000bc

08004ccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b092      	sub	sp, #72	; 0x48
 8004cd0:	af04      	add	r7, sp, #16
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cdc:	f3ef 8305 	mrs	r3, IPSR
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 8094 	bne.w	8004e12 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cea:	f3ef 8310 	mrs	r3, PRIMASK
 8004cee:	623b      	str	r3, [r7, #32]
  return(result);
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 808d 	bne.w	8004e12 <osThreadNew+0x146>
 8004cf8:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <osThreadNew+0x150>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d106      	bne.n	8004d0e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d00:	f3ef 8311 	mrs	r3, BASEPRI
 8004d04:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 8082 	bne.w	8004e12 <osThreadNew+0x146>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d07e      	beq.n	8004e12 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004d14:	2380      	movs	r3, #128	; 0x80
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004d18:	2318      	movs	r3, #24
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004d20:	f107 031b 	add.w	r3, r7, #27
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d045      	beq.n	8004dbe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <osThreadNew+0x74>
        name = attr->name;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <osThreadNew+0x9a>
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	2b38      	cmp	r3, #56	; 0x38
 8004d58:	d805      	bhi.n	8004d66 <osThreadNew+0x9a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <osThreadNew+0x9e>
        return (NULL);
 8004d66:	2300      	movs	r3, #0
 8004d68:	e054      	b.n	8004e14 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	089b      	lsrs	r3, r3, #2
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <osThreadNew+0xd4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b5b      	cmp	r3, #91	; 0x5b
 8004d88:	d90a      	bls.n	8004da0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <osThreadNew+0xd4>
        mem = 1;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d9e:	e010      	b.n	8004dc2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10c      	bne.n	8004dc2 <osThreadNew+0xf6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <osThreadNew+0xf6>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d104      	bne.n	8004dc2 <osThreadNew+0xf6>
          mem = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbc:	e001      	b.n	8004dc2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d110      	bne.n	8004dea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004dd0:	9202      	str	r2, [sp, #8]
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ddc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fea2 	bl	8005b28 <xTaskCreateStatic>
 8004de4:	4603      	mov	r3, r0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e013      	b.n	8004e12 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d110      	bne.n	8004e12 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	f107 0314 	add.w	r3, r7, #20
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fee9 	bl	8005bda <xTaskCreate>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d001      	beq.n	8004e12 <osThreadNew+0x146>
          hTask = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e12:	697b      	ldr	r3, [r7, #20]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3738      	adds	r7, #56	; 0x38
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	200000bc 	.word	0x200000bc

08004e20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e28:	f3ef 8305 	mrs	r3, IPSR
 8004e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8004e2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10f      	bne.n	8004e54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <osDelay+0x34>
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <osDelay+0x58>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d109      	bne.n	8004e5c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e48:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <osDelay+0x3c>
    stat = osErrorISR;
 8004e54:	f06f 0305 	mvn.w	r3, #5
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e007      	b.n	8004e6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fff2 	bl	8005e50 <vTaskDelay>
    }
  }

  return (stat);
 8004e6c:	697b      	ldr	r3, [r7, #20]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200000bc 	.word	0x200000bc

08004e7c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e88:	f3ef 8305 	mrs	r3, IPSR
 8004e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d13d      	bne.n	8004f10 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e94:	f3ef 8310 	mrs	r3, PRIMASK
 8004e98:	613b      	str	r3, [r7, #16]
  return(result);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d137      	bne.n	8004f10 <osEventFlagsNew+0x94>
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <osEventFlagsNew+0xa0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d105      	bne.n	8004eb4 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8004eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d12d      	bne.n	8004f10 <osEventFlagsNew+0x94>
    mem = -1;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d006      	beq.n	8004ed6 <osEventFlagsNew+0x5a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b1f      	cmp	r3, #31
 8004ece:	d902      	bls.n	8004ed6 <osEventFlagsNew+0x5a>
        mem = 1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	e00c      	b.n	8004ef0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <osEventFlagsNew+0x74>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d104      	bne.n	8004ef0 <osEventFlagsNew+0x74>
          mem = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e001      	b.n	8004ef0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d106      	bne.n	8004f04 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f842 	bl	8004f84 <xEventGroupCreateStatic>
 8004f00:	61f8      	str	r0, [r7, #28]
 8004f02:	e005      	b.n	8004f10 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004f0a:	f000 f870 	bl	8004fee <xEventGroupCreate>
 8004f0e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004f10:	69fb      	ldr	r3, [r7, #28]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200000bc 	.word	0x200000bc

08004f20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a06      	ldr	r2, [pc, #24]	; (8004f48 <vApplicationGetIdleTaskMemory+0x28>)
 8004f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4a05      	ldr	r2, [pc, #20]	; (8004f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	601a      	str	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	200000c0 	.word	0x200000c0
 8004f4c:	2000011c 	.word	0x2000011c

08004f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8004f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a06      	ldr	r2, [pc, #24]	; (8004f80 <vApplicationGetTimerTaskMemory+0x30>)
 8004f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	2000031c 	.word	0x2000031c
 8004f80:	20000378 	.word	0x20000378

08004f84 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e7fe      	b.n	8004fa4 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004fa6:	2320      	movs	r3, #32
 8004fa8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d009      	beq.n	8004fc4 <xEventGroupCreateStatic+0x40>
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e7fe      	b.n	8004fc2 <xEventGroupCreateStatic+0x3e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f822 	bl	8005022 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004fe4:	697b      	ldr	r3, [r7, #20]
	}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004ff4:	2020      	movs	r0, #32
 8004ff6:	f002 f965 	bl	80072c4 <pvPortMalloc>
 8004ffa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f808 	bl	8005022 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005018:	687b      	ldr	r3, [r7, #4]
	}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f103 0208 	add.w	r2, r3, #8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800503a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 0208 	add.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f103 0208 	add.w	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d4:	d103      	bne.n	80050de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e00c      	b.n	80050f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3308      	adds	r3, #8
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e002      	b.n	80050ec <vListInsert+0x2e>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d2f6      	bcs.n	80050e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6892      	ldr	r2, [r2, #8]
 8005144:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6852      	ldr	r2, [r2, #4]
 800514e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d103      	bne.n	8005162 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <xQueueGenericReset+0x28>
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	e7fe      	b.n	80051a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80051a8:	f001 ff96 	bl	80070d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	3b01      	subs	r3, #1
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	441a      	add	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	; 0xff
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d114      	bne.n	8005228 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01a      	beq.n	800523c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3310      	adds	r3, #16
 800520a:	4618      	mov	r0, r3
 800520c:	f001 f8d8 	bl	80063c0 <xTaskRemoveFromEventList>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d012      	beq.n	800523c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <xQueueGenericReset+0xcc>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	e009      	b.n	800523c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3310      	adds	r3, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fef8 	bl	8005022 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3324      	adds	r3, #36	; 0x24
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fef3 	bl	8005022 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800523c:	f001 ff7a 	bl	8007134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005240:	2301      	movs	r3, #1
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <xQueueGenericCreateStatic+0x28>
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	e7fe      	b.n	8005276 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <xQueueGenericCreateStatic+0x42>
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <xQueueGenericCreateStatic+0x4e>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <xQueueGenericCreateStatic+0x52>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericCreateStatic+0x54>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <xQueueGenericCreateStatic+0x6c>
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	e7fe      	b.n	80052ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <xQueueGenericCreateStatic+0x78>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <xQueueGenericCreateStatic+0x7c>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <xQueueGenericCreateStatic+0x7e>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <xQueueGenericCreateStatic+0x96>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052e6:	2350      	movs	r3, #80	; 0x50
 80052e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b50      	cmp	r3, #80	; 0x50
 80052ee:	d009      	beq.n	8005304 <xQueueGenericCreateStatic+0xb4>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e7fe      	b.n	8005302 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005316:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f805 	bl	8005334 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800532c:	4618      	mov	r0, r3
 800532e:	3730      	adds	r7, #48	; 0x30
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e002      	b.n	8005356 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005362:	2101      	movs	r1, #1
 8005364:	69b8      	ldr	r0, [r7, #24]
 8005366:	f7ff ff0b 	bl	8005180 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	; 0x38
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800538a:	2300      	movs	r3, #0
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <xQueueGenericSend+0x30>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053aa:	e7fe      	b.n	80053aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <xQueueGenericSend+0x3e>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <xQueueGenericSend+0x42>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <xQueueGenericSend+0x44>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <xQueueGenericSend+0x5c>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	e7fe      	b.n	80053d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d103      	bne.n	80053e6 <xQueueGenericSend+0x6a>
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <xQueueGenericSend+0x6e>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <xQueueGenericSend+0x70>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <xQueueGenericSend+0x88>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	623b      	str	r3, [r7, #32]
 8005402:	e7fe      	b.n	8005402 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005404:	f001 f996 	bl	8006734 <xTaskGetSchedulerState>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <xQueueGenericSend+0x98>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <xQueueGenericSend+0x9c>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <xQueueGenericSend+0x9e>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <xQueueGenericSend+0xb6>
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e7fe      	b.n	8005430 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005432:	f001 fe51 	bl	80070d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <xQueueGenericSend+0xcc>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d129      	bne.n	800549c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544e:	f000 f9ff 	bl	8005850 <prvCopyDataToQueue>
 8005452:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d010      	beq.n	800547e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	3324      	adds	r3, #36	; 0x24
 8005460:	4618      	mov	r0, r3
 8005462:	f000 ffad 	bl	80063c0 <xTaskRemoveFromEventList>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800546c:	4b3f      	ldr	r3, [pc, #252]	; (800556c <xQueueGenericSend+0x1f0>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	e00a      	b.n	8005494 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005484:	4b39      	ldr	r3, [pc, #228]	; (800556c <xQueueGenericSend+0x1f0>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005494:	f001 fe4e 	bl	8007134 <vPortExitCritical>
				return pdPASS;
 8005498:	2301      	movs	r3, #1
 800549a:	e063      	b.n	8005564 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054a2:	f001 fe47 	bl	8007134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e05c      	b.n	8005564 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 ffe5 	bl	8006484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054be:	f001 fe39 	bl	8007134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054c2:	f000 fd5d 	bl	8005f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c6:	f001 fe07 	bl	80070d8 <vPortEnterCritical>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d6:	d103      	bne.n	80054e0 <xQueueGenericSend+0x164>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ec:	d103      	bne.n	80054f6 <xQueueGenericSend+0x17a>
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f6:	f001 fe1d 	bl	8007134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054fa:	1d3a      	adds	r2, r7, #4
 80054fc:	f107 0314 	add.w	r3, r7, #20
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f000 ffd4 	bl	80064b0 <xTaskCheckForTimeOut>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d124      	bne.n	8005558 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800550e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005510:	f000 fa96 	bl	8005a40 <prvIsQueueFull>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d018      	beq.n	800554c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	3310      	adds	r3, #16
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fefe 	bl	8006324 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552a:	f000 fa21 	bl	8005970 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800552e:	f000 fd35 	bl	8005f9c <xTaskResumeAll>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	f47f af7c 	bne.w	8005432 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <xQueueGenericSend+0x1f0>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	e772      	b.n	8005432 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800554c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554e:	f000 fa0f 	bl	8005970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005552:	f000 fd23 	bl	8005f9c <xTaskResumeAll>
 8005556:	e76c      	b.n	8005432 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800555a:	f000 fa09 	bl	8005970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800555e:	f000 fd1d 	bl	8005f9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005562:	2300      	movs	r3, #0
		}
	}
}
 8005564:	4618      	mov	r0, r3
 8005566:	3738      	adds	r7, #56	; 0x38
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	; 0x38
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2b00      	cmp	r3, #0
 8005586:	d109      	bne.n	800559c <xQueueGenericSendFromISR+0x2c>
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
 800559a:	e7fe      	b.n	800559a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <xQueueGenericSendFromISR+0x3a>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <xQueueGenericSendFromISR+0x3e>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <xQueueGenericSendFromISR+0x40>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <xQueueGenericSendFromISR+0x58>
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	e7fe      	b.n	80055c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <xQueueGenericSendFromISR+0x66>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <xQueueGenericSendFromISR+0x6a>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <xQueueGenericSendFromISR+0x6c>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <xQueueGenericSendFromISR+0x84>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	61fb      	str	r3, [r7, #28]
 80055f2:	e7fe      	b.n	80055f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055f4:	f001 fe2a 	bl	800724c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055f8:	f3ef 8211 	mrs	r2, BASEPRI
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	61ba      	str	r2, [r7, #24]
 800560e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005610:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	429a      	cmp	r2, r3
 800561e:	d302      	bcc.n	8005626 <xQueueGenericSendFromISR+0xb6>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d12c      	bne.n	8005680 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005636:	f000 f90b 	bl	8005850 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800563a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005642:	d112      	bne.n	800566a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d016      	beq.n	800567a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	3324      	adds	r3, #36	; 0x24
 8005650:	4618      	mov	r0, r3
 8005652:	f000 feb5 	bl	80063c0 <xTaskRemoveFromEventList>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e007      	b.n	800567a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800566a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800566e:	3301      	adds	r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	b25a      	sxtb	r2, r3
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800567a:	2301      	movs	r3, #1
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800567e:	e001      	b.n	8005684 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005680:	2300      	movs	r3, #0
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005690:	4618      	mov	r0, r3
 8005692:	3738      	adds	r7, #56	; 0x38
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08c      	sub	sp, #48	; 0x30
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056a4:	2300      	movs	r3, #0
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <xQueueReceive+0x2e>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	e7fe      	b.n	80056c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <xQueueReceive+0x3c>
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <xQueueReceive+0x40>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <xQueueReceive+0x42>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <xQueueReceive+0x5a>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	e7fe      	b.n	80056f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056f2:	f001 f81f 	bl	8006734 <xTaskGetSchedulerState>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <xQueueReceive+0x6a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <xQueueReceive+0x6e>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <xQueueReceive+0x70>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <xQueueReceive+0x88>
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e7fe      	b.n	800571e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005720:	f001 fcda 	bl	80070d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01f      	beq.n	8005770 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005734:	f000 f8f6 	bl	8005924 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1e5a      	subs	r2, r3, #1
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00f      	beq.n	8005768 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	3310      	adds	r3, #16
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fe37 	bl	80063c0 <xTaskRemoveFromEventList>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005758:	4b3c      	ldr	r3, [pc, #240]	; (800584c <xQueueReceive+0x1b4>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005768:	f001 fce4 	bl	8007134 <vPortExitCritical>
				return pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	e069      	b.n	8005844 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005776:	f001 fcdd 	bl	8007134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800577a:	2300      	movs	r3, #0
 800577c:	e062      	b.n	8005844 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fe7b 	bl	8006484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005792:	f001 fccf 	bl	8007134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005796:	f000 fbf3 	bl	8005f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800579a:	f001 fc9d 	bl	80070d8 <vPortEnterCritical>
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057aa:	d103      	bne.n	80057b4 <xQueueReceive+0x11c>
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c0:	d103      	bne.n	80057ca <xQueueReceive+0x132>
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ca:	f001 fcb3 	bl	8007134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057ce:	1d3a      	adds	r2, r7, #4
 80057d0:	f107 0310 	add.w	r3, r7, #16
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fe6a 	bl	80064b0 <xTaskCheckForTimeOut>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d123      	bne.n	800582a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e4:	f000 f916 	bl	8005a14 <prvIsQueueEmpty>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d017      	beq.n	800581e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	3324      	adds	r3, #36	; 0x24
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fd94 	bl	8006324 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fe:	f000 f8b7 	bl	8005970 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005802:	f000 fbcb 	bl	8005f9c <xTaskResumeAll>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d189      	bne.n	8005720 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <xQueueReceive+0x1b4>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	e780      	b.n	8005720 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800581e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005820:	f000 f8a6 	bl	8005970 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005824:	f000 fbba 	bl	8005f9c <xTaskResumeAll>
 8005828:	e77a      	b.n	8005720 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800582a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800582c:	f000 f8a0 	bl	8005970 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005830:	f000 fbb4 	bl	8005f9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005836:	f000 f8ed 	bl	8005a14 <prvIsQueueEmpty>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	f43f af6f 	beq.w	8005720 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005842:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005844:	4618      	mov	r0, r3
 8005846:	3730      	adds	r7, #48	; 0x30
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	e000ed04 	.word	0xe000ed04

08005850 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d14d      	bne.n	8005912 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 ff78 	bl	8006770 <xTaskPriorityDisinherit>
 8005880:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	605a      	str	r2, [r3, #4]
 8005888:	e043      	b.n	8005912 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d119      	bne.n	80058c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6898      	ldr	r0, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	461a      	mov	r2, r3
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	f001 ff0a 	bl	80076b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	441a      	add	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d32b      	bcc.n	8005912 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	609a      	str	r2, [r3, #8]
 80058c2:	e026      	b.n	8005912 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68d8      	ldr	r0, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	461a      	mov	r2, r3
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	f001 fef0 	bl	80076b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	425b      	negs	r3, r3
 80058de:	441a      	add	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d207      	bcs.n	8005900 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	425b      	negs	r3, r3
 80058fa:	441a      	add	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d105      	bne.n	8005912 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	3b01      	subs	r3, #1
 8005910:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800591a:	697b      	ldr	r3, [r7, #20]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d018      	beq.n	8005968 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	441a      	add	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d303      	bcc.n	8005958 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68d9      	ldr	r1, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	461a      	mov	r2, r3
 8005962:	6838      	ldr	r0, [r7, #0]
 8005964:	f001 fea6 	bl	80076b4 <memcpy>
	}
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005978:	f001 fbae 	bl	80070d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005982:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005984:	e011      	b.n	80059aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3324      	adds	r3, #36	; 0x24
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fd14 	bl	80063c0 <xTaskRemoveFromEventList>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800599e:	f000 fde7 	bl	8006570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	dce9      	bgt.n	8005986 <prvUnlockQueue+0x16>
 80059b2:	e000      	b.n	80059b6 <prvUnlockQueue+0x46>
					break;
 80059b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	22ff      	movs	r2, #255	; 0xff
 80059ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80059be:	f001 fbb9 	bl	8007134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059c2:	f001 fb89 	bl	80070d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ce:	e011      	b.n	80059f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d012      	beq.n	80059fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3310      	adds	r3, #16
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fcef 	bl	80063c0 <xTaskRemoveFromEventList>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059e8:	f000 fdc2 	bl	8006570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dce9      	bgt.n	80059d0 <prvUnlockQueue+0x60>
 80059fc:	e000      	b.n	8005a00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	22ff      	movs	r2, #255	; 0xff
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a08:	f001 fb94 	bl	8007134 <vPortExitCritical>
}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a1c:	f001 fb5c 	bl	80070d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e001      	b.n	8005a32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a32:	f001 fb7f 	bl	8007134 <vPortExitCritical>

	return xReturn;
 8005a36:	68fb      	ldr	r3, [r7, #12]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a48:	f001 fb46 	bl	80070d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d102      	bne.n	8005a5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e001      	b.n	8005a62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a62:	f001 fb67 	bl	8007134 <vPortExitCritical>

	return xReturn;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e014      	b.n	8005aaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a80:	4a0e      	ldr	r2, [pc, #56]	; (8005abc <vQueueAddToRegistry+0x4c>)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a8c:	490b      	ldr	r1, [pc, #44]	; (8005abc <vQueueAddToRegistry+0x4c>)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a96:	4a09      	ldr	r2, [pc, #36]	; (8005abc <vQueueAddToRegistry+0x4c>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005aa2:	e005      	b.n	8005ab0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b07      	cmp	r3, #7
 8005aae:	d9e7      	bls.n	8005a80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20002748 	.word	0x20002748

08005ac0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ad0:	f001 fb02 	bl	80070d8 <vPortEnterCritical>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae0:	d103      	bne.n	8005aea <vQueueWaitForMessageRestricted+0x2a>
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af6:	d103      	bne.n	8005b00 <vQueueWaitForMessageRestricted+0x40>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b00:	f001 fb18 	bl	8007134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3324      	adds	r3, #36	; 0x24
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fc29 	bl	800636c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b1a:	6978      	ldr	r0, [r7, #20]
 8005b1c:	f7ff ff28 	bl	8005970 <prvUnlockQueue>
	}
 8005b20:	bf00      	nop
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08e      	sub	sp, #56	; 0x38
 8005b2c:	af04      	add	r7, sp, #16
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <xTaskCreateStatic+0x28>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	623b      	str	r3, [r7, #32]
 8005b4e:	e7fe      	b.n	8005b4e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <xTaskCreateStatic+0x42>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	e7fe      	b.n	8005b68 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b6a:	235c      	movs	r3, #92	; 0x5c
 8005b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b5c      	cmp	r3, #92	; 0x5c
 8005b72:	d009      	beq.n	8005b88 <xTaskCreateStatic+0x60>
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e7fe      	b.n	8005b86 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01e      	beq.n	8005bcc <xTaskCreateStatic+0xa4>
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01b      	beq.n	8005bcc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9303      	str	r3, [sp, #12]
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	9302      	str	r3, [sp, #8]
 8005bae:	f107 0314 	add.w	r3, r7, #20
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f850 	bl	8005c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bc6:	f000 f8d3 	bl	8005d70 <prvAddNewTaskToReadyList>
 8005bca:	e001      	b.n	8005bd0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bd0:	697b      	ldr	r3, [r7, #20]
	}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3728      	adds	r7, #40	; 0x28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b08c      	sub	sp, #48	; 0x30
 8005bde:	af04      	add	r7, sp, #16
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fb68 	bl	80072c4 <pvPortMalloc>
 8005bf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00e      	beq.n	8005c1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005bfc:	205c      	movs	r0, #92	; 0x5c
 8005bfe:	f001 fb61 	bl	80072c4 <pvPortMalloc>
 8005c02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c10:	e005      	b.n	8005c1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	f001 fc18 	bl	8007448 <vPortFree>
 8005c18:	e001      	b.n	8005c1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9303      	str	r3, [sp, #12]
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	9302      	str	r3, [sp, #8]
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f80e 	bl	8005c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c48:	69f8      	ldr	r0, [r7, #28]
 8005c4a:	f000 f891 	bl	8005d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	e002      	b.n	8005c5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	21a5      	movs	r1, #165	; 0xa5
 8005c7e:	f001 fd24 	bl	80076ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f023 0307 	bic.w	r3, r3, #7
 8005c9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <prvInitialiseNewTask+0x56>
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e7fe      	b.n	8005cb8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e012      	b.n	8005ce6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	7819      	ldrb	r1, [r3, #0]
 8005cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	3334      	adds	r3, #52	; 0x34
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d006      	beq.n	8005cee <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2b0f      	cmp	r3, #15
 8005cea:	d9e9      	bls.n	8005cc0 <prvInitialiseNewTask+0x5c>
 8005cec:	e000      	b.n	8005cf0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005cee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	2b37      	cmp	r3, #55	; 0x37
 8005cfc:	d901      	bls.n	8005d02 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cfe:	2337      	movs	r3, #55	; 0x37
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2200      	movs	r2, #0
 8005d12:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	3304      	adds	r3, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff f9a1 	bl	8005060 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	3318      	adds	r3, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff f99c 	bl	8005060 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	2200      	movs	r2, #0
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	69b8      	ldr	r0, [r7, #24]
 8005d52:	f001 f8d7 	bl	8006f04 <pxPortInitialiseStack>
 8005d56:	4602      	mov	r2, r0
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d68:	bf00      	nop
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d78:	f001 f9ae 	bl	80070d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d7c:	4b2d      	ldr	r3, [pc, #180]	; (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	4a2c      	ldr	r2, [pc, #176]	; (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005d84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d86:	4b2c      	ldr	r3, [pc, #176]	; (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d8e:	4a2a      	ldr	r2, [pc, #168]	; (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d94:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d110      	bne.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d9c:	f000 fc0c 	bl	80065b8 <prvInitialiseTaskLists>
 8005da0:	e00d      	b.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005da2:	4b26      	ldr	r3, [pc, #152]	; (8005e3c <prvAddNewTaskToReadyList+0xcc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005daa:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d802      	bhi.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005db8:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dbe:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <prvAddNewTaskToReadyList+0xd0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <prvAddNewTaskToReadyList+0xd0>)
 8005dc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <prvAddNewTaskToReadyList+0xd0>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <prvAddNewTaskToReadyList+0xd4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d903      	bls.n	8005de4 <prvAddNewTaskToReadyList+0x74>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <prvAddNewTaskToReadyList+0xd4>)
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <prvAddNewTaskToReadyList+0xd8>)
 8005df2:	441a      	add	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7ff f93c 	bl	8005078 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e00:	f001 f998 	bl	8007134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e04:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <prvAddNewTaskToReadyList+0xcc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d207      	bcs.n	8005e2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <prvAddNewTaskToReadyList+0xdc>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000c4c 	.word	0x20000c4c
 8005e38:	20000778 	.word	0x20000778
 8005e3c:	20000c58 	.word	0x20000c58
 8005e40:	20000c68 	.word	0x20000c68
 8005e44:	20000c54 	.word	0x20000c54
 8005e48:	2000077c 	.word	0x2000077c
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e62:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <vTaskDelay+0x60>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <vTaskDelay+0x2e>
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	e7fe      	b.n	8005e7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005e7e:	f000 f87f 	bl	8005f80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fcdf 	bl	8006848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e8a:	f000 f887 	bl	8005f9c <xTaskResumeAll>
 8005e8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d107      	bne.n	8005ea6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005e96:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <vTaskDelay+0x64>)
 8005e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000c74 	.word	0x20000c74
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ec6:	463a      	mov	r2, r7
 8005ec8:	1d39      	adds	r1, r7, #4
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff f826 	bl	8004f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	9202      	str	r2, [sp, #8]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	460a      	mov	r2, r1
 8005ee6:	4920      	ldr	r1, [pc, #128]	; (8005f68 <vTaskStartScheduler+0xb0>)
 8005ee8:	4820      	ldr	r0, [pc, #128]	; (8005f6c <vTaskStartScheduler+0xb4>)
 8005eea:	f7ff fe1d 	bl	8005b28 <xTaskCreateStatic>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <vTaskStartScheduler+0xb8>)
 8005ef2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ef4:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <vTaskStartScheduler+0xb8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005efc:	2301      	movs	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e001      	b.n	8005f06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d102      	bne.n	8005f12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f0c:	f000 fcf0 	bl	80068f0 <xTimerCreateTimerTask>
 8005f10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d115      	bne.n	8005f44 <vTaskStartScheduler+0x8c>
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <vTaskStartScheduler+0xbc>)
 8005f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f32:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <vTaskStartScheduler+0xc0>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <vTaskStartScheduler+0xc4>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f3e:	f001 f85b 	bl	8006ff8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f42:	e00d      	b.n	8005f60 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4a:	d109      	bne.n	8005f60 <vTaskStartScheduler+0xa8>
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	e7fe      	b.n	8005f5e <vTaskStartScheduler+0xa6>
}
 8005f60:	bf00      	nop
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08007730 	.word	0x08007730
 8005f6c:	08006589 	.word	0x08006589
 8005f70:	20000c70 	.word	0x20000c70
 8005f74:	20000c6c 	.word	0x20000c6c
 8005f78:	20000c58 	.word	0x20000c58
 8005f7c:	20000c50 	.word	0x20000c50

08005f80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f84:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <vTaskSuspendAll+0x18>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	4a03      	ldr	r2, [pc, #12]	; (8005f98 <vTaskSuspendAll+0x18>)
 8005f8c:	6013      	str	r3, [r2, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000c74 	.word	0x20000c74

08005f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005faa:	4b41      	ldr	r3, [pc, #260]	; (80060b0 <xTaskResumeAll+0x114>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <xTaskResumeAll+0x2a>
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	e7fe      	b.n	8005fc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fc6:	f001 f887 	bl	80070d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fca:	4b39      	ldr	r3, [pc, #228]	; (80060b0 <xTaskResumeAll+0x114>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	4a37      	ldr	r2, [pc, #220]	; (80060b0 <xTaskResumeAll+0x114>)
 8005fd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <xTaskResumeAll+0x114>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d162      	bne.n	80060a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <xTaskResumeAll+0x118>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d05e      	beq.n	80060a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe4:	e02f      	b.n	8006046 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005fe6:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <xTaskResumeAll+0x11c>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3318      	adds	r3, #24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f89b 	bl	800512e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f896 	bl	800512e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	4b2d      	ldr	r3, [pc, #180]	; (80060bc <xTaskResumeAll+0x120>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d903      	bls.n	8006016 <xTaskResumeAll+0x7a>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <xTaskResumeAll+0x120>)
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4a27      	ldr	r2, [pc, #156]	; (80060c0 <xTaskResumeAll+0x124>)
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7ff f823 	bl	8005078 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <xTaskResumeAll+0x128>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	429a      	cmp	r2, r3
 800603e:	d302      	bcc.n	8006046 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006040:	4b21      	ldr	r3, [pc, #132]	; (80060c8 <xTaskResumeAll+0x12c>)
 8006042:	2201      	movs	r2, #1
 8006044:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <xTaskResumeAll+0x11c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1cb      	bne.n	8005fe6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006054:	f000 fb4a 	bl	80066ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006058:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <xTaskResumeAll+0x130>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d010      	beq.n	8006086 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006064:	f000 f844 	bl	80060f0 <xTaskIncrementTick>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800606e:	4b16      	ldr	r3, [pc, #88]	; (80060c8 <xTaskResumeAll+0x12c>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3b01      	subs	r3, #1
 8006078:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f1      	bne.n	8006064 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <xTaskResumeAll+0x130>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <xTaskResumeAll+0x12c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800608e:	2301      	movs	r3, #1
 8006090:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <xTaskResumeAll+0x134>)
 8006094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060a2:	f001 f847 	bl	8007134 <vPortExitCritical>

	return xAlreadyYielded;
 80060a6:	68bb      	ldr	r3, [r7, #8]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000c74 	.word	0x20000c74
 80060b4:	20000c4c 	.word	0x20000c4c
 80060b8:	20000c0c 	.word	0x20000c0c
 80060bc:	20000c54 	.word	0x20000c54
 80060c0:	2000077c 	.word	0x2000077c
 80060c4:	20000778 	.word	0x20000778
 80060c8:	20000c60 	.word	0x20000c60
 80060cc:	20000c5c 	.word	0x20000c5c
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060da:	4b04      	ldr	r3, [pc, #16]	; (80060ec <xTaskGetTickCount+0x18>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060e0:	687b      	ldr	r3, [r7, #4]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr
 80060ec:	20000c50 	.word	0x20000c50

080060f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fa:	4b51      	ldr	r3, [pc, #324]	; (8006240 <xTaskIncrementTick+0x150>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 808d 	bne.w	800621e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006104:	4b4f      	ldr	r3, [pc, #316]	; (8006244 <xTaskIncrementTick+0x154>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800610c:	4a4d      	ldr	r2, [pc, #308]	; (8006244 <xTaskIncrementTick+0x154>)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11f      	bne.n	8006158 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006118:	4b4b      	ldr	r3, [pc, #300]	; (8006248 <xTaskIncrementTick+0x158>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <xTaskIncrementTick+0x46>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	e7fe      	b.n	8006134 <xTaskIncrementTick+0x44>
 8006136:	4b44      	ldr	r3, [pc, #272]	; (8006248 <xTaskIncrementTick+0x158>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	4b43      	ldr	r3, [pc, #268]	; (800624c <xTaskIncrementTick+0x15c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a41      	ldr	r2, [pc, #260]	; (8006248 <xTaskIncrementTick+0x158>)
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	4a41      	ldr	r2, [pc, #260]	; (800624c <xTaskIncrementTick+0x15c>)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	4b41      	ldr	r3, [pc, #260]	; (8006250 <xTaskIncrementTick+0x160>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	4a3f      	ldr	r2, [pc, #252]	; (8006250 <xTaskIncrementTick+0x160>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	f000 faca 	bl	80066ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006158:	4b3e      	ldr	r3, [pc, #248]	; (8006254 <xTaskIncrementTick+0x164>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	429a      	cmp	r2, r3
 8006160:	d34e      	bcc.n	8006200 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006162:	4b39      	ldr	r3, [pc, #228]	; (8006248 <xTaskIncrementTick+0x158>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <xTaskIncrementTick+0x80>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <xTaskIncrementTick+0x82>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006176:	4b37      	ldr	r3, [pc, #220]	; (8006254 <xTaskIncrementTick+0x164>)
 8006178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800617c:	601a      	str	r2, [r3, #0]
					break;
 800617e:	e03f      	b.n	8006200 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006180:	4b31      	ldr	r3, [pc, #196]	; (8006248 <xTaskIncrementTick+0x158>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d203      	bcs.n	80061a0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006198:	4a2e      	ldr	r2, [pc, #184]	; (8006254 <xTaskIncrementTick+0x164>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6013      	str	r3, [r2, #0]
						break;
 800619e:	e02f      	b.n	8006200 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe ffc2 	bl	800512e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	3318      	adds	r3, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe ffb9 	bl	800512e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	4b25      	ldr	r3, [pc, #148]	; (8006258 <xTaskIncrementTick+0x168>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d903      	bls.n	80061d0 <xTaskIncrementTick+0xe0>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	4a22      	ldr	r2, [pc, #136]	; (8006258 <xTaskIncrementTick+0x168>)
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4a1f      	ldr	r2, [pc, #124]	; (800625c <xTaskIncrementTick+0x16c>)
 80061de:	441a      	add	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f7fe ff46 	bl	8005078 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <xTaskIncrementTick+0x170>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d3b3      	bcc.n	8006162 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061fe:	e7b0      	b.n	8006162 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <xTaskIncrementTick+0x170>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	4915      	ldr	r1, [pc, #84]	; (800625c <xTaskIncrementTick+0x16c>)
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d907      	bls.n	8006228 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e004      	b.n	8006228 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <xTaskIncrementTick+0x174>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	4a0f      	ldr	r2, [pc, #60]	; (8006264 <xTaskIncrementTick+0x174>)
 8006226:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006228:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <xTaskIncrementTick+0x178>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006234:	697b      	ldr	r3, [r7, #20]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000c74 	.word	0x20000c74
 8006244:	20000c50 	.word	0x20000c50
 8006248:	20000c04 	.word	0x20000c04
 800624c:	20000c08 	.word	0x20000c08
 8006250:	20000c64 	.word	0x20000c64
 8006254:	20000c6c 	.word	0x20000c6c
 8006258:	20000c54 	.word	0x20000c54
 800625c:	2000077c 	.word	0x2000077c
 8006260:	20000778 	.word	0x20000778
 8006264:	20000c5c 	.word	0x20000c5c
 8006268:	20000c60 	.word	0x20000c60

0800626c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006272:	4b27      	ldr	r3, [pc, #156]	; (8006310 <vTaskSwitchContext+0xa4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <vTaskSwitchContext+0xa8>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006280:	e040      	b.n	8006304 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <vTaskSwitchContext+0xa8>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006288:	4b23      	ldr	r3, [pc, #140]	; (8006318 <vTaskSwitchContext+0xac>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e00f      	b.n	80062b0 <vTaskSwitchContext+0x44>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <vTaskSwitchContext+0x3e>
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	607b      	str	r3, [r7, #4]
 80062a8:	e7fe      	b.n	80062a8 <vTaskSwitchContext+0x3c>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	491a      	ldr	r1, [pc, #104]	; (800631c <vTaskSwitchContext+0xb0>)
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0e5      	beq.n	8006290 <vTaskSwitchContext+0x24>
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <vTaskSwitchContext+0xb0>)
 80062d0:	4413      	add	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	605a      	str	r2, [r3, #4]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	3308      	adds	r3, #8
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d104      	bne.n	80062f4 <vTaskSwitchContext+0x88>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <vTaskSwitchContext+0xb4>)
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4a06      	ldr	r2, [pc, #24]	; (8006318 <vTaskSwitchContext+0xac>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6013      	str	r3, [r2, #0]
}
 8006304:	bf00      	nop
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000c74 	.word	0x20000c74
 8006314:	20000c60 	.word	0x20000c60
 8006318:	20000c54 	.word	0x20000c54
 800631c:	2000077c 	.word	0x2000077c
 8006320:	20000778 	.word	0x20000778

08006324 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d109      	bne.n	8006348 <vTaskPlaceOnEventList+0x24>
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e7fe      	b.n	8006346 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <vTaskPlaceOnEventList+0x44>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3318      	adds	r3, #24
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fe feb4 	bl	80050be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006356:	2101      	movs	r1, #1
 8006358:	6838      	ldr	r0, [r7, #0]
 800635a:	f000 fa75 	bl	8006848 <prvAddCurrentTaskToDelayedList>
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000778 	.word	0x20000778

0800636c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <vTaskPlaceOnEventListRestricted+0x26>
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e7fe      	b.n	8006390 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vTaskPlaceOnEventListRestricted+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3318      	adds	r3, #24
 8006398:	4619      	mov	r1, r3
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7fe fe6c 	bl	8005078 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f000 fa4a 	bl	8006848 <prvAddCurrentTaskToDelayedList>
	}
 80063b4:	bf00      	nop
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000778 	.word	0x20000778

080063c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <xTaskRemoveFromEventList+0x2a>
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e7fe      	b.n	80063e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3318      	adds	r3, #24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fe9d 	bl	800512e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f4:	4b1d      	ldr	r3, [pc, #116]	; (800646c <xTaskRemoveFromEventList+0xac>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d11d      	bne.n	8006438 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fe94 	bl	800512e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <xTaskRemoveFromEventList+0xb0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d903      	bls.n	800641a <xTaskRemoveFromEventList+0x5a>
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a16      	ldr	r2, [pc, #88]	; (8006470 <xTaskRemoveFromEventList+0xb0>)
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4a13      	ldr	r2, [pc, #76]	; (8006474 <xTaskRemoveFromEventList+0xb4>)
 8006428:	441a      	add	r2, r3
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe fe21 	bl	8005078 <vListInsertEnd>
 8006436:	e005      	b.n	8006444 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	3318      	adds	r3, #24
 800643c:	4619      	mov	r1, r3
 800643e:	480e      	ldr	r0, [pc, #56]	; (8006478 <xTaskRemoveFromEventList+0xb8>)
 8006440:	f7fe fe1a 	bl	8005078 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <xTaskRemoveFromEventList+0xbc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	429a      	cmp	r2, r3
 8006450:	d905      	bls.n	800645e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <xTaskRemoveFromEventList+0xc0>)
 8006458:	2201      	movs	r2, #1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e001      	b.n	8006462 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006462:	697b      	ldr	r3, [r7, #20]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000c74 	.word	0x20000c74
 8006470:	20000c54 	.word	0x20000c54
 8006474:	2000077c 	.word	0x2000077c
 8006478:	20000c0c 	.word	0x20000c0c
 800647c:	20000778 	.word	0x20000778
 8006480:	20000c60 	.word	0x20000c60

08006484 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <vTaskInternalSetTimeOutState+0x24>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <vTaskInternalSetTimeOutState+0x28>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	605a      	str	r2, [r3, #4]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000c64 	.word	0x20000c64
 80064ac:	20000c50 	.word	0x20000c50

080064b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <xTaskCheckForTimeOut+0x24>
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e7fe      	b.n	80064d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <xTaskCheckForTimeOut+0x3e>
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e7fe      	b.n	80064ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80064ee:	f000 fdf3 	bl	80070d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064f2:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <xTaskCheckForTimeOut+0xb8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800650a:	d102      	bne.n	8006512 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	e023      	b.n	800655a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b15      	ldr	r3, [pc, #84]	; (800656c <xTaskCheckForTimeOut+0xbc>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d007      	beq.n	800652e <xTaskCheckForTimeOut+0x7e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e015      	b.n	800655a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	429a      	cmp	r2, r3
 8006536:	d20b      	bcs.n	8006550 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff9d 	bl	8006484 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e004      	b.n	800655a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800655a:	f000 fdeb 	bl	8007134 <vPortExitCritical>

	return xReturn;
 800655e:	69fb      	ldr	r3, [r7, #28]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000c50 	.word	0x20000c50
 800656c:	20000c64 	.word	0x20000c64

08006570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <vTaskMissedYield+0x14>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000c60 	.word	0x20000c60

08006588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006590:	f000 f852 	bl	8006638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <prvIdleTask+0x28>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d9f9      	bls.n	8006590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <prvIdleTask+0x2c>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065ac:	e7f0      	b.n	8006590 <prvIdleTask+0x8>
 80065ae:	bf00      	nop
 80065b0:	2000077c 	.word	0x2000077c
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065be:	2300      	movs	r3, #0
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	e00c      	b.n	80065de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <prvInitialiseTaskLists+0x60>)
 80065d0:	4413      	add	r3, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fd25 	bl	8005022 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3301      	adds	r3, #1
 80065dc:	607b      	str	r3, [r7, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b37      	cmp	r3, #55	; 0x37
 80065e2:	d9ef      	bls.n	80065c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065e4:	480d      	ldr	r0, [pc, #52]	; (800661c <prvInitialiseTaskLists+0x64>)
 80065e6:	f7fe fd1c 	bl	8005022 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065ea:	480d      	ldr	r0, [pc, #52]	; (8006620 <prvInitialiseTaskLists+0x68>)
 80065ec:	f7fe fd19 	bl	8005022 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065f0:	480c      	ldr	r0, [pc, #48]	; (8006624 <prvInitialiseTaskLists+0x6c>)
 80065f2:	f7fe fd16 	bl	8005022 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065f6:	480c      	ldr	r0, [pc, #48]	; (8006628 <prvInitialiseTaskLists+0x70>)
 80065f8:	f7fe fd13 	bl	8005022 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <prvInitialiseTaskLists+0x74>)
 80065fe:	f7fe fd10 	bl	8005022 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvInitialiseTaskLists+0x78>)
 8006604:	4a05      	ldr	r2, [pc, #20]	; (800661c <prvInitialiseTaskLists+0x64>)
 8006606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <prvInitialiseTaskLists+0x7c>)
 800660a:	4a05      	ldr	r2, [pc, #20]	; (8006620 <prvInitialiseTaskLists+0x68>)
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	2000077c 	.word	0x2000077c
 800661c:	20000bdc 	.word	0x20000bdc
 8006620:	20000bf0 	.word	0x20000bf0
 8006624:	20000c0c 	.word	0x20000c0c
 8006628:	20000c20 	.word	0x20000c20
 800662c:	20000c38 	.word	0x20000c38
 8006630:	20000c04 	.word	0x20000c04
 8006634:	20000c08 	.word	0x20000c08

08006638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800663e:	e019      	b.n	8006674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006640:	f000 fd4a 	bl	80070d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <prvCheckTasksWaitingTermination+0x4c>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fd6c 	bl	800512e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006656:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <prvCheckTasksWaitingTermination+0x50>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3b01      	subs	r3, #1
 800665c:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <prvCheckTasksWaitingTermination+0x50>)
 800665e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3b01      	subs	r3, #1
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800666a:	f000 fd63 	bl	8007134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f80e 	bl	8006690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <prvCheckTasksWaitingTermination+0x54>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e1      	bne.n	8006640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20000c20 	.word	0x20000c20
 8006688:	20000c4c 	.word	0x20000c4c
 800668c:	20000c34 	.word	0x20000c34

08006690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fece 	bl	8007448 <vPortFree>
				vPortFree( pxTCB );
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fecb 	bl	8007448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066b2:	e017      	b.n	80066e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d103      	bne.n	80066c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fec2 	bl	8007448 <vPortFree>
	}
 80066c4:	e00e      	b.n	80066e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d009      	beq.n	80066e4 <prvDeleteTCB+0x54>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e7fe      	b.n	80066e2 <prvDeleteTCB+0x52>
	}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <prvResetNextTaskUnblockTime+0x40>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <prvResetNextTaskUnblockTime+0x14>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <prvResetNextTaskUnblockTime+0x16>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006706:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <prvResetNextTaskUnblockTime+0x44>)
 8006708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800670c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800670e:	e008      	b.n	8006722 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <prvResetNextTaskUnblockTime+0x40>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4a04      	ldr	r2, [pc, #16]	; (8006730 <prvResetNextTaskUnblockTime+0x44>)
 8006720:	6013      	str	r3, [r2, #0]
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	20000c04 	.word	0x20000c04
 8006730:	20000c6c 	.word	0x20000c6c

08006734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <xTaskGetSchedulerState+0x34>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d102      	bne.n	8006748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006742:	2301      	movs	r3, #1
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	e008      	b.n	800675a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <xTaskGetSchedulerState+0x38>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006750:	2302      	movs	r3, #2
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	e001      	b.n	800675a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006756:	2300      	movs	r3, #0
 8006758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800675a:	687b      	ldr	r3, [r7, #4]
	}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000c58 	.word	0x20000c58
 800676c:	20000c74 	.word	0x20000c74

08006770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d054      	beq.n	8006830 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006786:	4b2d      	ldr	r3, [pc, #180]	; (800683c <xTaskPriorityDisinherit+0xcc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	429a      	cmp	r2, r3
 800678e:	d009      	beq.n	80067a4 <xTaskPriorityDisinherit+0x34>
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e7fe      	b.n	80067a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <xTaskPriorityDisinherit+0x50>
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	e7fe      	b.n	80067be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	1e5a      	subs	r2, r3, #1
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d02c      	beq.n	8006830 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d128      	bne.n	8006830 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fca3 	bl	800512e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <xTaskPriorityDisinherit+0xd0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d903      	bls.n	8006810 <xTaskPriorityDisinherit+0xa0>
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	4a0c      	ldr	r2, [pc, #48]	; (8006840 <xTaskPriorityDisinherit+0xd0>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4a09      	ldr	r2, [pc, #36]	; (8006844 <xTaskPriorityDisinherit+0xd4>)
 800681e:	441a      	add	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7fe fc26 	bl	8005078 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006830:	697b      	ldr	r3, [r7, #20]
	}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000778 	.word	0x20000778
 8006840:	20000c54 	.word	0x20000c54
 8006844:	2000077c 	.word	0x2000077c

08006848 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006852:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006858:	4b20      	ldr	r3, [pc, #128]	; (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3304      	adds	r3, #4
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fc65 	bl	800512e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686a:	d10a      	bne.n	8006882 <prvAddCurrentTaskToDelayedList+0x3a>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006872:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4819      	ldr	r0, [pc, #100]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800687c:	f7fe fbfc 	bl	8005078 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006880:	e026      	b.n	80068d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4413      	add	r3, r2
 8006888:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	429a      	cmp	r2, r3
 8006898:	d209      	bcs.n	80068ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800689a:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe fc09 	bl	80050be <vListInsert>
}
 80068ac:	e010      	b.n	80068d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ae:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <prvAddCurrentTaskToDelayedList+0x94>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f7fe fbff 	bl	80050be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d202      	bcs.n	80068d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068ca:	4a08      	ldr	r2, [pc, #32]	; (80068ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6013      	str	r3, [r2, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000c50 	.word	0x20000c50
 80068dc:	20000778 	.word	0x20000778
 80068e0:	20000c38 	.word	0x20000c38
 80068e4:	20000c08 	.word	0x20000c08
 80068e8:	20000c04 	.word	0x20000c04
 80068ec:	20000c6c 	.word	0x20000c6c

080068f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068fa:	f000 fac3 	bl	8006e84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068fe:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <xTimerCreateTimerTask+0x80>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d021      	beq.n	800694a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800690e:	1d3a      	adds	r2, r7, #4
 8006910:	f107 0108 	add.w	r1, r7, #8
 8006914:	f107 030c 	add.w	r3, r7, #12
 8006918:	4618      	mov	r0, r3
 800691a:	f7fe fb19 	bl	8004f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	9202      	str	r2, [sp, #8]
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	2302      	movs	r3, #2
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2300      	movs	r3, #0
 800692e:	460a      	mov	r2, r1
 8006930:	4910      	ldr	r1, [pc, #64]	; (8006974 <xTimerCreateTimerTask+0x84>)
 8006932:	4811      	ldr	r0, [pc, #68]	; (8006978 <xTimerCreateTimerTask+0x88>)
 8006934:	f7ff f8f8 	bl	8005b28 <xTaskCreateStatic>
 8006938:	4602      	mov	r2, r0
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <xTimerCreateTimerTask+0x8c>)
 800693c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <xTimerCreateTimerTask+0x8c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006946:	2301      	movs	r3, #1
 8006948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <xTimerCreateTimerTask+0x74>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	e7fe      	b.n	8006962 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006964:	697b      	ldr	r3, [r7, #20]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000ca8 	.word	0x20000ca8
 8006974:	08007738 	.word	0x08007738
 8006978:	08006a99 	.word	0x08006a99
 800697c:	20000cac 	.word	0x20000cac

08006980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800698e:	2300      	movs	r3, #0
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <xTimerGenericCommand+0x2c>
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	623b      	str	r3, [r7, #32]
 80069aa:	e7fe      	b.n	80069aa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <xTimerGenericCommand+0x94>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02a      	beq.n	8006a0a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	dc18      	bgt.n	80069f8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069c6:	f7ff feb5 	bl	8006734 <xTaskGetSchedulerState>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d109      	bne.n	80069e4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069d0:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <xTimerGenericCommand+0x94>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	f107 0110 	add.w	r1, r7, #16
 80069d8:	2300      	movs	r3, #0
 80069da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069dc:	f7fe fcce 	bl	800537c <xQueueGenericSend>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24
 80069e2:	e012      	b.n	8006a0a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069e4:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <xTimerGenericCommand+0x94>)
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	f107 0110 	add.w	r1, r7, #16
 80069ec:	2300      	movs	r3, #0
 80069ee:	2200      	movs	r2, #0
 80069f0:	f7fe fcc4 	bl	800537c <xQueueGenericSend>
 80069f4:	6278      	str	r0, [r7, #36]	; 0x24
 80069f6:	e008      	b.n	8006a0a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069f8:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <xTimerGenericCommand+0x94>)
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	f107 0110 	add.w	r1, r7, #16
 8006a00:	2300      	movs	r3, #0
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	f7fe fdb4 	bl	8005570 <xQueueGenericSendFromISR>
 8006a08:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3728      	adds	r7, #40	; 0x28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000ca8 	.word	0x20000ca8

08006a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a22:	4b1c      	ldr	r3, [pc, #112]	; (8006a94 <prvProcessExpiredTimer+0x7c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe fb7c 	bl	800512e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d121      	bne.n	8006a82 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	18d1      	adds	r1, r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	6978      	ldr	r0, [r7, #20]
 8006a4c:	f000 f8c8 	bl	8006be0 <prvInsertTimerInActiveList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d015      	beq.n	8006a82 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a56:	2300      	movs	r3, #0
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	2100      	movs	r1, #0
 8006a60:	6978      	ldr	r0, [r7, #20]
 8006a62:	f7ff ff8d 	bl	8006980 <xTimerGenericCommand>
 8006a66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <prvProcessExpiredTimer+0x6a>
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e7fe      	b.n	8006a80 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	6978      	ldr	r0, [r7, #20]
 8006a88:	4798      	blx	r3
}
 8006a8a:	bf00      	nop
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000ca0 	.word	0x20000ca0

08006a98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006aa0:	f107 0308 	add.w	r3, r7, #8
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 f857 	bl	8006b58 <prvGetNextExpireTime>
 8006aaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f803 	bl	8006abc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ab6:	f000 f8d5 	bl	8006c64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006aba:	e7f1      	b.n	8006aa0 <prvTimerTask+0x8>

08006abc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ac6:	f7ff fa5b 	bl	8005f80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aca:	f107 0308 	add.w	r3, r7, #8
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f866 	bl	8006ba0 <prvSampleTimeNow>
 8006ad4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d130      	bne.n	8006b3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <prvProcessTimerOrBlockTask+0x3c>
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d806      	bhi.n	8006af8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aea:	f7ff fa57 	bl	8005f9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff91 	bl	8006a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006af6:	e024      	b.n	8006b42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006afe:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <prvProcessTimerOrBlockTask+0x90>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <prvProcessTimerOrBlockTask+0x94>)
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f7fe ffcf 	bl	8005ac0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b22:	f7ff fa3b 	bl	8005f9c <xTaskResumeAll>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <prvProcessTimerOrBlockTask+0x98>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	f3bf 8f6f 	isb	sy
}
 8006b3c:	e001      	b.n	8006b42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b3e:	f7ff fa2d 	bl	8005f9c <xTaskResumeAll>
}
 8006b42:	bf00      	nop
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000ca4 	.word	0x20000ca4
 8006b50:	20000ca8 	.word	0x20000ca8
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b60:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <prvGetNextExpireTime+0x44>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bf0c      	ite	eq
 8006b6a:	2301      	moveq	r3, #1
 8006b6c:	2300      	movne	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <prvGetNextExpireTime+0x44>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e001      	b.n	8006b8e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000ca0 	.word	0x20000ca0

08006ba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ba8:	f7ff fa94 	bl	80060d4 <xTaskGetTickCount>
 8006bac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bae:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <prvSampleTimeNow+0x3c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d205      	bcs.n	8006bc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bb8:	f000 f904 	bl	8006dc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bca:	4a04      	ldr	r2, [pc, #16]	; (8006bdc <prvSampleTimeNow+0x3c>)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000cb0 	.word	0x20000cb0

08006be0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d812      	bhi.n	8006c2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d302      	bcc.n	8006c1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c14:	2301      	movs	r3, #1
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e01b      	b.n	8006c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c1a:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <prvInsertTimerInActiveList+0x7c>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fe fa4a 	bl	80050be <vListInsert>
 8006c2a:	e012      	b.n	8006c52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d206      	bcs.n	8006c42 <prvInsertTimerInActiveList+0x62>
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e007      	b.n	8006c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c42:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <prvInsertTimerInActiveList+0x80>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe fa36 	bl	80050be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c52:	697b      	ldr	r3, [r7, #20]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000ca4 	.word	0x20000ca4
 8006c60:	20000ca0 	.word	0x20000ca0

08006c64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08e      	sub	sp, #56	; 0x38
 8006c68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c6a:	e099      	b.n	8006da0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da17      	bge.n	8006ca2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	3304      	adds	r3, #4
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <prvProcessReceivedCommands+0x2e>
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e7fe      	b.n	8006c90 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c98:	6850      	ldr	r0, [r2, #4]
 8006c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c9c:	6892      	ldr	r2, [r2, #8]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db7a      	blt.n	8006d9e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fa38 	bl	800512e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff ff6d 	bl	8006ba0 <prvSampleTimeNow>
 8006cc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d868      	bhi.n	8006da0 <prvProcessReceivedCommands+0x13c>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <prvProcessReceivedCommands+0x70>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006cfd 	.word	0x08006cfd
 8006ce0:	08006da1 	.word	0x08006da1
 8006ce4:	08006d57 	.word	0x08006d57
 8006ce8:	08006d8d 	.word	0x08006d8d
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006cfd 	.word	0x08006cfd
 8006cf4:	08006da1 	.word	0x08006da1
 8006cf8:	08006d57 	.word	0x08006d57
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	18d1      	adds	r1, r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d0a:	f7ff ff69 	bl	8006be0 <prvInsertTimerInActiveList>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d045      	beq.n	8006da0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d13d      	bne.n	8006da0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	441a      	add	r2, r3
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	2100      	movs	r1, #0
 8006d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d36:	f7ff fe23 	bl	8006980 <xTimerGenericCommand>
 8006d3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d12e      	bne.n	8006da0 <prvProcessReceivedCommands+0x13c>
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	e7fe      	b.n	8006d54 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <prvProcessReceivedCommands+0x114>
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e7fe      	b.n	8006d76 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	699a      	ldr	r2, [r3, #24]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	18d1      	adds	r1, r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d86:	f7ff ff2b 	bl	8006be0 <prvInsertTimerInActiveList>
					break;
 8006d8a:	e009      	b.n	8006da0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d98:	f000 fb56 	bl	8007448 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d9c:	e000      	b.n	8006da0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d9e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <prvProcessReceivedCommands+0x15c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	1d39      	adds	r1, r7, #4
 8006da6:	2200      	movs	r2, #0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe fc75 	bl	8005698 <xQueueReceive>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f af5b 	bne.w	8006c6c <prvProcessReceivedCommands+0x8>
	}
}
 8006db6:	bf00      	nop
 8006db8:	3730      	adds	r7, #48	; 0x30
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000ca8 	.word	0x20000ca8

08006dc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dca:	e044      	b.n	8006e56 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dcc:	4b2b      	ldr	r3, [pc, #172]	; (8006e7c <prvSwitchTimerLists+0xb8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd6:	4b29      	ldr	r3, [pc, #164]	; (8006e7c <prvSwitchTimerLists+0xb8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe f9a2 	bl	800512e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d12d      	bne.n	8006e56 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4413      	add	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d90e      	bls.n	8006e2a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e18:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <prvSwitchTimerLists+0xb8>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe f94b 	bl	80050be <vListInsert>
 8006e28:	e015      	b.n	8006e56 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	2100      	movs	r1, #0
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff fda3 	bl	8006980 <xTimerGenericCommand>
 8006e3a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <prvSwitchTimerLists+0x92>
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	e7fe      	b.n	8006e54 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e56:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <prvSwitchTimerLists+0xb8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1b5      	bne.n	8006dcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <prvSwitchTimerLists+0xb8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e66:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <prvSwitchTimerLists+0xbc>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a04      	ldr	r2, [pc, #16]	; (8006e7c <prvSwitchTimerLists+0xb8>)
 8006e6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e6e:	4a04      	ldr	r2, [pc, #16]	; (8006e80 <prvSwitchTimerLists+0xbc>)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6013      	str	r3, [r2, #0]
}
 8006e74:	bf00      	nop
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000ca0 	.word	0x20000ca0
 8006e80:	20000ca4 	.word	0x20000ca4

08006e84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e8a:	f000 f925 	bl	80070d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <prvCheckForValidListAndQueue+0x60>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d120      	bne.n	8006ed8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e96:	4814      	ldr	r0, [pc, #80]	; (8006ee8 <prvCheckForValidListAndQueue+0x64>)
 8006e98:	f7fe f8c3 	bl	8005022 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e9c:	4813      	ldr	r0, [pc, #76]	; (8006eec <prvCheckForValidListAndQueue+0x68>)
 8006e9e:	f7fe f8c0 	bl	8005022 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <prvCheckForValidListAndQueue+0x6c>)
 8006ea4:	4a10      	ldr	r2, [pc, #64]	; (8006ee8 <prvCheckForValidListAndQueue+0x64>)
 8006ea6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ea8:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <prvCheckForValidListAndQueue+0x70>)
 8006eaa:	4a10      	ldr	r2, [pc, #64]	; (8006eec <prvCheckForValidListAndQueue+0x68>)
 8006eac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eae:	2300      	movs	r3, #0
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <prvCheckForValidListAndQueue+0x74>)
 8006eb4:	4a11      	ldr	r2, [pc, #68]	; (8006efc <prvCheckForValidListAndQueue+0x78>)
 8006eb6:	2110      	movs	r1, #16
 8006eb8:	200a      	movs	r0, #10
 8006eba:	f7fe f9c9 	bl	8005250 <xQueueGenericCreateStatic>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <prvCheckForValidListAndQueue+0x60>)
 8006ec2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ec4:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <prvCheckForValidListAndQueue+0x60>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <prvCheckForValidListAndQueue+0x60>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	490b      	ldr	r1, [pc, #44]	; (8006f00 <prvCheckForValidListAndQueue+0x7c>)
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fdcc 	bl	8005a70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ed8:	f000 f92c 	bl	8007134 <vPortExitCritical>
}
 8006edc:	bf00      	nop
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000ca8 	.word	0x20000ca8
 8006ee8:	20000c78 	.word	0x20000c78
 8006eec:	20000c8c 	.word	0x20000c8c
 8006ef0:	20000ca0 	.word	0x20000ca0
 8006ef4:	20000ca4 	.word	0x20000ca4
 8006ef8:	20000d54 	.word	0x20000d54
 8006efc:	20000cb4 	.word	0x20000cb4
 8006f00:	08007740 	.word	0x08007740

08006f04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3b04      	subs	r3, #4
 8006f14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3b04      	subs	r3, #4
 8006f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f023 0201 	bic.w	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3b04      	subs	r3, #4
 8006f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f34:	4a08      	ldr	r2, [pc, #32]	; (8006f58 <pxPortInitialiseStack+0x54>)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3b14      	subs	r3, #20
 8006f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3b20      	subs	r3, #32
 8006f4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr
 8006f58:	08006f5d 	.word	0x08006f5d

08006f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f66:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <prvTaskExitError+0x4c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d009      	beq.n	8006f84 <prvTaskExitError+0x28>
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e7fe      	b.n	8006f82 <prvTaskExitError+0x26>
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f96:	bf00      	nop
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0fc      	beq.n	8006f98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr
 8006fa8:	2000000c 	.word	0x2000000c
 8006fac:	00000000 	.word	0x00000000

08006fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	f04e 0e0d 	orr.w	lr, lr, #13
 8006fce:	4770      	bx	lr

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	20000778 	.word	0x20000778
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006fd8:	4806      	ldr	r0, [pc, #24]	; (8006ff4 <prvPortStartFirstTask+0x1c>)
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f380 8808 	msr	MSP, r0
 8006fe2:	b662      	cpsie	i
 8006fe4:	b661      	cpsie	f
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	df00      	svc	0
 8006ff0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ff2:	bf00      	nop
 8006ff4:	e000ed08 	.word	0xe000ed08

08006ff8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ffe:	4b31      	ldr	r3, [pc, #196]	; (80070c4 <xPortStartScheduler+0xcc>)
 8007000:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	22ff      	movs	r2, #255	; 0xff
 800700e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007020:	b2da      	uxtb	r2, r3
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <xPortStartScheduler+0xd0>)
 8007024:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007026:	4b29      	ldr	r3, [pc, #164]	; (80070cc <xPortStartScheduler+0xd4>)
 8007028:	2207      	movs	r2, #7
 800702a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800702c:	e009      	b.n	8007042 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800702e:	4b27      	ldr	r3, [pc, #156]	; (80070cc <xPortStartScheduler+0xd4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3b01      	subs	r3, #1
 8007034:	4a25      	ldr	r2, [pc, #148]	; (80070cc <xPortStartScheduler+0xd4>)
 8007036:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	b2db      	uxtb	r3, r3
 8007040:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d0ef      	beq.n	800702e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800704e:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <xPortStartScheduler+0xd4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1c3 0307 	rsb	r3, r3, #7
 8007056:	2b04      	cmp	r3, #4
 8007058:	d009      	beq.n	800706e <xPortStartScheduler+0x76>
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	e7fe      	b.n	800706c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800706e:	4b17      	ldr	r3, [pc, #92]	; (80070cc <xPortStartScheduler+0xd4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	4a15      	ldr	r2, [pc, #84]	; (80070cc <xPortStartScheduler+0xd4>)
 8007076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007078:	4b14      	ldr	r3, [pc, #80]	; (80070cc <xPortStartScheduler+0xd4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007080:	4a12      	ldr	r2, [pc, #72]	; (80070cc <xPortStartScheduler+0xd4>)
 8007082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800708c:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <xPortStartScheduler+0xd8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007092:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <xPortStartScheduler+0xd8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <xPortStartScheduler+0xd8>)
 800709e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070a4:	f000 f8b0 	bl	8007208 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <xPortStartScheduler+0xdc>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070ae:	f7ff ff93 	bl	8006fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070b2:	f7ff f8db 	bl	800626c <vTaskSwitchContext>
	prvTaskExitError();
 80070b6:	f7ff ff51 	bl	8006f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	e000e400 	.word	0xe000e400
 80070c8:	20000da4 	.word	0x20000da4
 80070cc:	20000da8 	.word	0x20000da8
 80070d0:	e000ed20 	.word	0xe000ed20
 80070d4:	2000000c 	.word	0x2000000c

080070d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070f0:	4b0e      	ldr	r3, [pc, #56]	; (800712c <vPortEnterCritical+0x54>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a0d      	ldr	r2, [pc, #52]	; (800712c <vPortEnterCritical+0x54>)
 80070f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070fa:	4b0c      	ldr	r3, [pc, #48]	; (800712c <vPortEnterCritical+0x54>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d10e      	bne.n	8007120 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007102:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <vPortEnterCritical+0x58>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <vPortEnterCritical+0x48>
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	603b      	str	r3, [r7, #0]
 800711e:	e7fe      	b.n	800711e <vPortEnterCritical+0x46>
	}
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	2000000c 	.word	0x2000000c
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800713a:	4b10      	ldr	r3, [pc, #64]	; (800717c <vPortExitCritical+0x48>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <vPortExitCritical+0x22>
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	e7fe      	b.n	8007154 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <vPortExitCritical+0x48>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3b01      	subs	r3, #1
 800715c:	4a07      	ldr	r2, [pc, #28]	; (800717c <vPortExitCritical+0x48>)
 800715e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <vPortExitCritical+0x48>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <vPortExitCritical+0x3e>
 8007168:	2300      	movs	r3, #0
 800716a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr
 800717c:	2000000c 	.word	0x2000000c

08007180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007180:	f3ef 8009 	mrs	r0, PSP
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <pxCurrentTCBConst>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007190:	6010      	str	r0, [r2, #0]
 8007192:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007196:	f04f 0050 	mov.w	r0, #80	; 0x50
 800719a:	f380 8811 	msr	BASEPRI, r0
 800719e:	f7ff f865 	bl	800626c <vTaskSwitchContext>
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f380 8811 	msr	BASEPRI, r0
 80071aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80071ae:	6819      	ldr	r1, [r3, #0]
 80071b0:	6808      	ldr	r0, [r1, #0]
 80071b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071b6:	f380 8809 	msr	PSP, r0
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	4770      	bx	lr

080071c0 <pxCurrentTCBConst>:
 80071c0:	20000778 	.word	0x20000778
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071e0:	f7fe ff86 	bl	80060f0 <xTaskIncrementTick>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071ea:	4b06      	ldr	r3, [pc, #24]	; (8007204 <SysTick_Handler+0x3c>)
 80071ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <vPortSetupTimerInterrupt+0x30>)
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007212:	4b0a      	ldr	r3, [pc, #40]	; (800723c <vPortSetupTimerInterrupt+0x34>)
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007218:	4b09      	ldr	r3, [pc, #36]	; (8007240 <vPortSetupTimerInterrupt+0x38>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a09      	ldr	r2, [pc, #36]	; (8007244 <vPortSetupTimerInterrupt+0x3c>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	099b      	lsrs	r3, r3, #6
 8007224:	4a08      	ldr	r2, [pc, #32]	; (8007248 <vPortSetupTimerInterrupt+0x40>)
 8007226:	3b01      	subs	r3, #1
 8007228:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800722a:	4b03      	ldr	r3, [pc, #12]	; (8007238 <vPortSetupTimerInterrupt+0x30>)
 800722c:	2207      	movs	r2, #7
 800722e:	601a      	str	r2, [r3, #0]
}
 8007230:	bf00      	nop
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr
 8007238:	e000e010 	.word	0xe000e010
 800723c:	e000e018 	.word	0xe000e018
 8007240:	20000000 	.word	0x20000000
 8007244:	10624dd3 	.word	0x10624dd3
 8007248:	e000e014 	.word	0xe000e014

0800724c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007252:	f3ef 8305 	mrs	r3, IPSR
 8007256:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d913      	bls.n	8007286 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800725e:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <vPortValidateInterruptPriority+0x68>)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007268:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <vPortValidateInterruptPriority+0x6c>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	7afa      	ldrb	r2, [r7, #11]
 800726e:	429a      	cmp	r2, r3
 8007270:	d209      	bcs.n	8007286 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	607b      	str	r3, [r7, #4]
 8007284:	e7fe      	b.n	8007284 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <vPortValidateInterruptPriority+0x70>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <vPortValidateInterruptPriority+0x74>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d909      	bls.n	80072aa <vPortValidateInterruptPriority+0x5e>
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	e7fe      	b.n	80072a8 <vPortValidateInterruptPriority+0x5c>
	}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr
 80072b4:	e000e3f0 	.word	0xe000e3f0
 80072b8:	20000da4 	.word	0x20000da4
 80072bc:	e000ed0c 	.word	0xe000ed0c
 80072c0:	20000da8 	.word	0x20000da8

080072c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072d0:	f7fe fe56 	bl	8005f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072d4:	4b57      	ldr	r3, [pc, #348]	; (8007434 <pvPortMalloc+0x170>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072dc:	f000 f90c 	bl	80074f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072e0:	4b55      	ldr	r3, [pc, #340]	; (8007438 <pvPortMalloc+0x174>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4013      	ands	r3, r2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f040 808c 	bne.w	8007406 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01c      	beq.n	800732e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80072f4:	2208      	movs	r2, #8
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	2b00      	cmp	r3, #0
 8007304:	d013      	beq.n	800732e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f023 0307 	bic.w	r3, r3, #7
 800730c:	3308      	adds	r3, #8
 800730e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <pvPortMalloc+0x6a>
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	e7fe      	b.n	800732c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d068      	beq.n	8007406 <pvPortMalloc+0x142>
 8007334:	4b41      	ldr	r3, [pc, #260]	; (800743c <pvPortMalloc+0x178>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	429a      	cmp	r2, r3
 800733c:	d863      	bhi.n	8007406 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800733e:	4b40      	ldr	r3, [pc, #256]	; (8007440 <pvPortMalloc+0x17c>)
 8007340:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007342:	4b3f      	ldr	r3, [pc, #252]	; (8007440 <pvPortMalloc+0x17c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007348:	e004      	b.n	8007354 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	429a      	cmp	r2, r3
 800735c:	d903      	bls.n	8007366 <pvPortMalloc+0xa2>
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1f1      	bne.n	800734a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007366:	4b33      	ldr	r3, [pc, #204]	; (8007434 <pvPortMalloc+0x170>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736c:	429a      	cmp	r2, r3
 800736e:	d04a      	beq.n	8007406 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2208      	movs	r2, #8
 8007376:	4413      	add	r3, r2
 8007378:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	1ad2      	subs	r2, r2, r3
 800738a:	2308      	movs	r3, #8
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	429a      	cmp	r2, r3
 8007390:	d91e      	bls.n	80073d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4413      	add	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <pvPortMalloc+0xf4>
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	e7fe      	b.n	80073b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ca:	69b8      	ldr	r0, [r7, #24]
 80073cc:	f000 f8f6 	bl	80075bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073d0:	4b1a      	ldr	r3, [pc, #104]	; (800743c <pvPortMalloc+0x178>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <pvPortMalloc+0x178>)
 80073dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073de:	4b17      	ldr	r3, [pc, #92]	; (800743c <pvPortMalloc+0x178>)
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b18      	ldr	r3, [pc, #96]	; (8007444 <pvPortMalloc+0x180>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d203      	bcs.n	80073f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073ea:	4b14      	ldr	r3, [pc, #80]	; (800743c <pvPortMalloc+0x178>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a15      	ldr	r2, [pc, #84]	; (8007444 <pvPortMalloc+0x180>)
 80073f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <pvPortMalloc+0x174>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007406:	f7fe fdc9 	bl	8005f9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	2b00      	cmp	r3, #0
 8007412:	d009      	beq.n	8007428 <pvPortMalloc+0x164>
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e7fe      	b.n	8007426 <pvPortMalloc+0x162>
	return pvReturn;
 8007428:	69fb      	ldr	r3, [r7, #28]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3728      	adds	r7, #40	; 0x28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	200019b4 	.word	0x200019b4
 8007438:	200019c0 	.word	0x200019c0
 800743c:	200019b8 	.word	0x200019b8
 8007440:	200019ac 	.word	0x200019ac
 8007444:	200019bc 	.word	0x200019bc

08007448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d046      	beq.n	80074e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800745a:	2308      	movs	r3, #8
 800745c:	425b      	negs	r3, r3
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4413      	add	r3, r2
 8007462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <vPortFree+0xa8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <vPortFree+0x42>
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	e7fe      	b.n	8007488 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <vPortFree+0x5e>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60bb      	str	r3, [r7, #8]
 80074a4:	e7fe      	b.n	80074a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <vPortFree+0xa8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d019      	beq.n	80074e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d115      	bne.n	80074e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <vPortFree+0xa8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	43db      	mvns	r3, r3
 80074c6:	401a      	ands	r2, r3
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074cc:	f7fe fd58 	bl	8005f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <vPortFree+0xac>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4413      	add	r3, r2
 80074da:	4a06      	ldr	r2, [pc, #24]	; (80074f4 <vPortFree+0xac>)
 80074dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074de:	6938      	ldr	r0, [r7, #16]
 80074e0:	f000 f86c 	bl	80075bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074e4:	f7fe fd5a 	bl	8005f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074e8:	bf00      	nop
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	200019c0 	.word	0x200019c0
 80074f4:	200019b8 	.word	0x200019b8

080074f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007502:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007504:	4b27      	ldr	r3, [pc, #156]	; (80075a4 <prvHeapInit+0xac>)
 8007506:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00c      	beq.n	800752c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3307      	adds	r3, #7
 8007516:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a1f      	ldr	r2, [pc, #124]	; (80075a4 <prvHeapInit+0xac>)
 8007528:	4413      	add	r3, r2
 800752a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007530:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <prvHeapInit+0xb0>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007536:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <prvHeapInit+0xb0>)
 8007538:	2200      	movs	r2, #0
 800753a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4413      	add	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007544:	2208      	movs	r2, #8
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1a9b      	subs	r3, r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0307 	bic.w	r3, r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4a15      	ldr	r2, [pc, #84]	; (80075ac <prvHeapInit+0xb4>)
 8007558:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <prvHeapInit+0xb4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2200      	movs	r2, #0
 8007560:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <prvHeapInit+0xb4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	1ad2      	subs	r2, r2, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <prvHeapInit+0xb4>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <prvHeapInit+0xb8>)
 8007586:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <prvHeapInit+0xbc>)
 800758e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007590:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <prvHeapInit+0xc0>)
 8007592:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007596:	601a      	str	r2, [r3, #0]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000dac 	.word	0x20000dac
 80075a8:	200019ac 	.word	0x200019ac
 80075ac:	200019b4 	.word	0x200019b4
 80075b0:	200019bc 	.word	0x200019bc
 80075b4:	200019b8 	.word	0x200019b8
 80075b8:	200019c0 	.word	0x200019c0

080075bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075c4:	4b27      	ldr	r3, [pc, #156]	; (8007664 <prvInsertBlockIntoFreeList+0xa8>)
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e002      	b.n	80075d0 <prvInsertBlockIntoFreeList+0x14>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d8f7      	bhi.n	80075ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4413      	add	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d108      	bne.n	80075fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d118      	bne.n	8007644 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvInsertBlockIntoFreeList+0xac>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d00d      	beq.n	800763a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	441a      	add	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e008      	b.n	800764c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <prvInsertBlockIntoFreeList+0xac>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e003      	b.n	800764c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d002      	beq.n	800765a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr
 8007664:	200019ac 	.word	0x200019ac
 8007668:	200019b4 	.word	0x200019b4

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	2500      	movs	r5, #0
 8007670:	4e0c      	ldr	r6, [pc, #48]	; (80076a4 <__libc_init_array+0x38>)
 8007672:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007674:	1ba4      	subs	r4, r4, r6
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	42a5      	cmp	r5, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	f000 f82e 	bl	80076dc <_init>
 8007680:	2500      	movs	r5, #0
 8007682:	4e0a      	ldr	r6, [pc, #40]	; (80076ac <__libc_init_array+0x40>)
 8007684:	4c0a      	ldr	r4, [pc, #40]	; (80076b0 <__libc_init_array+0x44>)
 8007686:	1ba4      	subs	r4, r4, r6
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	42a5      	cmp	r5, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007694:	4798      	blx	r3
 8007696:	3501      	adds	r5, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800769e:	4798      	blx	r3
 80076a0:	3501      	adds	r5, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	0800807c 	.word	0x0800807c
 80076a8:	0800807c 	.word	0x0800807c
 80076ac:	0800807c 	.word	0x0800807c
 80076b0:	08008080 	.word	0x08008080

080076b4 <memcpy>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	1e43      	subs	r3, r0, #1
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	d100      	bne.n	80076c0 <memcpy+0xc>
 80076be:	bd10      	pop	{r4, pc}
 80076c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c8:	e7f7      	b.n	80076ba <memcpy+0x6>

080076ca <memset>:
 80076ca:	4603      	mov	r3, r0
 80076cc:	4402      	add	r2, r0
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d100      	bne.n	80076d4 <memset+0xa>
 80076d2:	4770      	bx	lr
 80076d4:	f803 1b01 	strb.w	r1, [r3], #1
 80076d8:	e7f9      	b.n	80076ce <memset+0x4>
	...

080076dc <_init>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr

080076e8 <_fini>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr
